diff --git a/arch/arm/boot/dts/imx6ul-itl-apm.dts b/arch/arm/boot/dts/imx6ul-itl-apm.dts
new file mode 100644
index 0000000..e1b1c3d
--- /dev/null
+++ b/arch/arm/boot/dts/imx6ul-itl-apm.dts
@@ -0,0 +1,464 @@
+/*
+ * Copyright (C) 2015 Freescale Semiconductor, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include <dt-bindings/input/input.h>
+#include "imx6ul.dtsi"
+
+/ {
+	model = "Freescale i.MX6 UltraLite 14x14 EVK Board";
+	compatible = "fsl,imx6ul-itl-apm", "fsl,imx6ul-14x14-evk", "fsl,imx6ul";
+
+	chosen {
+		stdout-path = &uart1;
+	};
+
+	memory {
+		reg = <0x80000000 0x08000000>;
+	};
+
+	buzzer {
+		compatible = "pwm-buzzer";
+		pwms = <&pwm1 0 5000000>;
+		buzzer-levels = <0 4 8 16 32 64 128 255>;
+		default-buzzer-level = <0>;
+		status = "okay";
+	};
+
+	backlight {
+		compatible = "pwm-backlight";
+		pwms = <&pwm2 0 5000000>;
+		brightness-levels = <255 128 64 32 16 8 4 0>;
+		default-brightness-level = <6>;
+		status = "okay";
+	};
+
+	pxp_v4l2 {
+		compatible = "fsl,imx6ul-pxp-v4l2", "fsl,imx6sx-pxp-v4l2", "fsl,imx6sl-pxp-v4l2";
+		status = "okay";
+	};
+};
+	
+&cpu0 {
+	arm-supply = <&reg_arm>;
+	soc-supply = <&reg_soc>;
+/*	dc-supply = <&reg_gpio_dvfs>; */
+};
+
+&clks {
+	assigned-clocks = <&clks IMX6UL_CLK_PLL4_AUDIO_DIV>;
+	assigned-clock-rates = <786432000>;
+};
+
+&csi {
+	status = "okay";
+
+	port {
+		csi1_ep: endpoint {
+			remote-endpoint = <&ov7670_ep>;
+		};
+	};
+};
+
+&fec1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet1>;
+	phy-mode = "rmii";
+	phy-handle = <&ethphy0>;
+	status = "okay";
+
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ethphy0: ethernet-phy@1 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <1>;
+		};
+	};
+};
+
+&gpc {
+	fsl,cpu_pupscr_sw2iso = <0x1>;
+	fsl,cpu_pupscr_sw = <0x0>;
+	fsl,cpu_pdnscr_iso2sw = <0x1>;
+	fsl,cpu_pdnscr_iso = <0x1>;
+	fsl,wdog-reset = <1>; /* watchdog select of reset source */
+	fsl,ldo-bypass = <0>; /* DCDC, ldo-enable */
+};
+
+&lcdif {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_lcdif_dat
+		     &pinctrl_lcdif_ctrl>;
+	display = <&display0>;
+	status = "okay";
+
+	display0: display {
+		bits-per-pixel = <16>;
+		bus-width = <24>;
+
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: timing0 {
+			clock-frequency = <9200000>;
+			hactive = <480>;
+			vactive = <272>;
+			hfront-porch = <8>;
+			hback-porch = <4>;
+			hsync-len = <41>;
+			vback-porch = <2>;
+			vfront-porch = <4>;
+			vsync-len = <10>;
+
+			hsync-active = <0>;
+			vsync-active = <0>;
+			de-active = <1>;
+			pixelclk-active = <0>;
+			};
+		};
+	};
+};
+
+&pwm1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm1>;
+	status = "okay";
+};
+
+&pwm2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm2>;
+	status = "okay";
+};
+
+&pxp {
+	status = "okay";
+};
+
+&tsc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_tsc>;
+	status = "okay";
+	xnur-gpio = <&gpio1 3 0>;
+	measure_delay_time = <0xffff>;
+	pre_charge_time = <0xfff>;
+};
+
+&uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1>;
+	status = "okay";
+};
+
+&uart8 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart8>;
+	/* for DTE mode, add below change */
+	fsl,dte-mode;
+	pinctrl-0 = <&pinctrl_uart8dte>;
+	status = "okay";
+};
+
+&usbotg1 {
+	dr_mode = "peripheral";
+	status = "okay";
+};
+
+&usbotg2 {
+	dr_mode = "host";
+	disable-over-current;
+	status = "okay";
+};
+
+&usdhc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc1>;
+	no-1-8-v;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+	status = "okay";
+};
+
+&i2c4 {
+	clock_frequency = <100000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c4>;
+	status = "okay";
+
+	ov7670: ov7670@21 {
+		compatible = "ovti,ov7670";
+		reg = <0x21>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_csi1>;
+		clocks = <&clks IMX6UL_CLK_CSI>;
+		clock-names = "csi_mclk";
+		pwn-gpios = <&gpio1 27 1>;
+		csi_id = <0>;
+		mclk = <24000000>;
+		mclk_source = <0>;
+		status = "okay";
+		port {
+			ov7670_ep: endpoint {
+				remote-endpoint = <&csi1_ep>;
+			};
+		};
+	};
+};
+
+&ecspi2 {
+	fsl,spi-num-chipselects = <2>;
+	/* cs-gpios = <0&gpio1 29 0>, <&gpio3 4 0>; */
+	pinctrl-names = "default";
+	/* pinctrl-0 = <&pinctrl_ecspi2_1 &pinctrl_ecspi2_cs_1>; */
+	pinctrl-0 = <&pinctrl_ecspi2_1>;
+	status = "okay";
+
+	spidev0: spidev@0 {
+		compatible = "spidev";
+		reg = <0>;
+        spi-max-frequency = <20000000>;
+	};
+
+	//spidev1: spidev@1 {
+	//	compatible = "spidev";
+	//	reg = <1>;
+    //   spi-max-frequency = <20000000>;
+	//};
+};
+
+&qspi {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_qspi>;
+	status = "okay";
+	ddrsmp=<0>;
+
+	flash0: n25q256a@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "micron,n25q256a";
+		spi-max-frequency = <29000000>;
+		spi-nor,ddr-quad-read-dummy = <6>;
+		reg = <0>;
+		
+		partition@0 {
+			label = "U-Boot";
+			reg = <0x0 0x40000>;
+			read-only;
+		};
+
+		partition@40000 {
+			label = "Kernel";
+			reg = <0x40000 0x3c0000>;
+		};		
+	};
+};
+
+&iomuxc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog_1>;
+	imx6ul-evk {
+		pinctrl_hog_1: hoggrp-1 {
+			fsl,pins = <
+				/* MX6UL_PAD_LCD_RESET__WDOG1_WDOG_ANY    0x30b0 */
+				MX6UL_PAD_UART1_RTS_B__USDHC1_CD_B	0x17059 /* SD1 CD */
+				/* MX6UL_PAD_GPIO1_IO05__USDHC1_VSELECT	0x17059 SD1 VSELECT */
+				MX6UL_PAD_UART3_RX_DATA__GPIO1_IO25		0x17059		/* STM32 IRQ */
+	
+			>;
+		};
+
+		pinctrl_csi1: csi1grp {
+			fsl,pins = <
+				MX6UL_PAD_CSI_MCLK__CSI_MCLK		0x1b088
+				MX6UL_PAD_CSI_PIXCLK__CSI_PIXCLK	0x1b088
+				MX6UL_PAD_CSI_VSYNC__CSI_VSYNC		0x1b088
+				MX6UL_PAD_CSI_HSYNC__CSI_HSYNC		0x1b088
+				MX6UL_PAD_CSI_DATA00__CSI_DATA02	0x1b088
+				MX6UL_PAD_CSI_DATA01__CSI_DATA03	0x1b088
+				MX6UL_PAD_CSI_DATA02__CSI_DATA04	0x1b088
+				MX6UL_PAD_CSI_DATA03__CSI_DATA05	0x1b088
+				MX6UL_PAD_CSI_DATA04__CSI_DATA06	0x1b088
+				MX6UL_PAD_CSI_DATA05__CSI_DATA07	0x1b088
+				MX6UL_PAD_CSI_DATA06__CSI_DATA08	0x1b088
+				MX6UL_PAD_CSI_DATA07__CSI_DATA09	0x1b088
+			>;
+		};
+
+		pinctrl_enet1: enet1grp {
+			fsl,pins = <
+				MX6UL_PAD_GPIO1_IO07__ENET1_MDC		0x1b0b0
+				MX6UL_PAD_GPIO1_IO06__ENET1_MDIO	0x1b0b0
+				MX6UL_PAD_ENET1_RX_EN__ENET1_RX_EN	0x1b0b0
+				MX6UL_PAD_ENET1_RX_ER__ENET1_RX_ER	0x1b0b0
+				MX6UL_PAD_ENET1_RX_DATA0__ENET1_RDATA00	0x1b0b0
+				MX6UL_PAD_ENET1_RX_DATA1__ENET1_RDATA01	0x1b0b0
+				MX6UL_PAD_ENET1_TX_EN__ENET1_TX_EN	0x1b0b0
+				MX6UL_PAD_ENET1_TX_DATA0__ENET1_TDATA00	0x1b0b0
+				MX6UL_PAD_ENET1_TX_DATA1__ENET1_TDATA01	0x1b0b0
+				MX6UL_PAD_ENET1_TX_CLK__ENET1_REF_CLK1	0x4001b031
+			>;
+		};
+
+		pinctrl_lcdif_dat: lcdifdatgrp {
+			fsl,pins = <
+				MX6UL_PAD_LCD_DATA00__LCDIF_DATA00  0x79
+				MX6UL_PAD_LCD_DATA01__LCDIF_DATA01  0x79
+				MX6UL_PAD_LCD_DATA02__LCDIF_DATA02  0x79
+				MX6UL_PAD_LCD_DATA03__LCDIF_DATA03  0x79
+				MX6UL_PAD_LCD_DATA04__LCDIF_DATA04  0x79
+				MX6UL_PAD_LCD_DATA05__LCDIF_DATA05  0x79
+				MX6UL_PAD_LCD_DATA06__LCDIF_DATA06  0x79
+				MX6UL_PAD_LCD_DATA07__LCDIF_DATA07  0x79
+				MX6UL_PAD_LCD_DATA08__LCDIF_DATA08  0x79
+				MX6UL_PAD_LCD_DATA09__LCDIF_DATA09  0x79
+				MX6UL_PAD_LCD_DATA10__LCDIF_DATA10  0x79
+				MX6UL_PAD_LCD_DATA11__LCDIF_DATA11  0x79
+				MX6UL_PAD_LCD_DATA12__LCDIF_DATA12  0x79
+				MX6UL_PAD_LCD_DATA13__LCDIF_DATA13  0x79
+				MX6UL_PAD_LCD_DATA14__LCDIF_DATA14  0x79
+				MX6UL_PAD_LCD_DATA15__LCDIF_DATA15  0x79
+				MX6UL_PAD_LCD_DATA16__LCDIF_DATA16  0x79
+				MX6UL_PAD_LCD_DATA17__LCDIF_DATA17  0x79
+				MX6UL_PAD_LCD_DATA18__LCDIF_DATA18  0x79
+				MX6UL_PAD_LCD_DATA19__LCDIF_DATA19  0x79
+				MX6UL_PAD_LCD_DATA20__LCDIF_DATA20  0x79
+				MX6UL_PAD_LCD_DATA21__LCDIF_DATA21  0x79
+				MX6UL_PAD_LCD_DATA22__LCDIF_DATA22  0x79
+				MX6UL_PAD_LCD_DATA23__LCDIF_DATA23  0x79
+			>;
+		};
+
+		pinctrl_lcdif_ctrl: lcdifctrlgrp {
+			fsl,pins = <
+				MX6UL_PAD_LCD_CLK__LCDIF_CLK	    0x79
+				MX6UL_PAD_LCD_ENABLE__LCDIF_ENABLE  0x79
+				MX6UL_PAD_LCD_HSYNC__LCDIF_HSYNC    0x79
+				MX6UL_PAD_LCD_VSYNC__LCDIF_VSYNC    0x79
+				/* used for lcd reset */
+				/* MX6UL_PAD_LCD_RESET__LCDIF_RESET  	0x79 */
+			>;
+		};
+
+		pinctrl_pwm1: pwm1grp {
+			fsl,pins = <
+				MX6UL_PAD_GPIO1_IO08__PWM1_OUT   0x110b0
+			>;
+		};
+		
+		pinctrl_pwm2: pwm2grp {
+			fsl,pins = <
+				MX6UL_PAD_GPIO1_IO09__PWM2_OUT   0x110b0
+			>;
+		};		
+
+		pinctrl_uart1: uart1grp {
+			fsl,pins = <
+				MX6UL_PAD_UART1_TX_DATA__UART1_DCE_TX 0x1b0b1
+				MX6UL_PAD_UART1_RX_DATA__UART1_DCE_RX 0x1b0b1
+			>;
+		};
+
+		pinctrl_uart8: uart8grp {
+			fsl,pins = <
+				MX6UL_PAD_ENET2_TX_EN__UART8_DTE_TX 0x1b0b1			
+				MX6UL_PAD_ENET2_TX_DATA1__UART8_DTE_RX  0x1b0b1
+			>;
+		};
+		
+		pinctrl_uart8dte: uart8dtegrp {
+			fsl,pins = <
+				MX6UL_PAD_ENET2_TX_EN__UART8_DTE_TX 0x1b0b1			
+				MX6UL_PAD_ENET2_TX_DATA1__UART8_DTE_RX  0x1b0b1
+			>;
+		};		
+		
+		pinctrl_usdhc1: usdhc1grp {
+			fsl,pins = <
+				MX6UL_PAD_SD1_CMD__USDHC1_CMD     0x17059
+				MX6UL_PAD_SD1_CLK__USDHC1_CLK     0x10071
+				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0 0x17059
+				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1 0x17059
+				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2 0x17059
+				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3 0x17059
+			>;
+		};
+
+		pinctrl_usdhc1_100mhz: usdhc1grp100mhz {
+			fsl,pins = <
+				MX6UL_PAD_SD1_CMD__USDHC1_CMD     0x170b9
+				MX6UL_PAD_SD1_CLK__USDHC1_CLK     0x100b9
+				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0 0x170b9
+				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1 0x170b9
+				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2 0x170b9
+				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3 0x170b9
+			>;
+		};
+
+		pinctrl_usdhc1_200mhz: usdhc1grp200mhz {
+			fsl,pins = <
+				MX6UL_PAD_SD1_CMD__USDHC1_CMD     0x170f9
+				MX6UL_PAD_SD1_CLK__USDHC1_CLK     0x100f9
+				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0 0x170f9
+				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1 0x170f9
+				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2 0x170f9
+				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3 0x170f9
+			>;
+		};
+
+		pinctrl_tsc: tscgrp {
+			fsl,pins = <
+				MX6UL_PAD_GPIO1_IO01__GPIO1_IO01	0xb0
+				MX6UL_PAD_GPIO1_IO02__GPIO1_IO02	0xb0
+				MX6UL_PAD_GPIO1_IO03__GPIO1_IO03	0xb0
+				MX6UL_PAD_GPIO1_IO04__GPIO1_IO04	0xb0
+			>;
+		};
+
+		pinctrl_i2c4: i2c4grp {
+			fsl,pins = <
+				MX6UL_PAD_UART2_TX_DATA__I2C4_SCL 0x4001b8b0
+				MX6UL_PAD_UART2_RX_DATA__I2C4_SDA 0x4001b8b0
+			>;
+		};
+
+		pinctrl_qspi: qspigrp {
+			fsl,pins = <
+				MX6UL_PAD_NAND_WP_B__QSPI_A_SCLK      0x70a1
+				MX6UL_PAD_NAND_READY_B__QSPI_A_DATA00 0x70a1
+				MX6UL_PAD_NAND_CE0_B__QSPI_A_DATA01   0x70a1
+				MX6UL_PAD_NAND_CE1_B__QSPI_A_DATA02   0x70a1
+				MX6UL_PAD_NAND_CLE__QSPI_A_DATA03     0x70a1
+				MX6UL_PAD_NAND_DQS__QSPI_A_SS0_B      0x70a1
+			>;
+		};
+
+/* 	spi2 { */
+/*	
+		pinctrl_ecspi2_cs_1: ecspi2_cs_grp-1 {
+			fsl,pins = <
+				MX6UL_PAD_UART4_RX_DATA__GPIO1_IO29		0x80000000
+				MX6UL_PAD_LCD_RESET__GPIO3_IO04			0x80000000
+				MX6UL_PAD_UART4_RX_DATA__ECSPI2_SS0		0x80000000
+				MX6UL_PAD_LCD_RESET__ECSPI2_SS3			0x80000000
+			>;
+		};
+*/
+		
+		pinctrl_ecspi2_1: ecspi2grp-1 {
+			fsl,pins = <
+				MX6UL_PAD_UART4_TX_DATA__ECSPI2_SCLK	0x70a1
+				MX6UL_PAD_UART5_TX_DATA__ECSPI2_MOSI	0x70a1
+				MX6UL_PAD_UART5_RX_DATA__ECSPI2_MISO	0x70a1
+				MX6UL_PAD_UART4_RX_DATA__ECSPI2_SS0		0x80000000
+			>;
+		};	
+/*	}; */
+	};
+};
diff --git a/drivers/media/platform/mxc/capture/ov7670.c b/drivers/media/platform/mxc/capture/ov7670.c
new file mode 100644
index 0000000..528d942
--- /dev/null
+++ b/drivers/media/platform/mxc/capture/ov7670.c
@@ -0,0 +1,1485 @@
+/*
+ * Copyright (C) 2012-2015 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/regulator/consumer.h>
+#include <media/v4l2-chip-ident.h>
+#include "v4l2-int-device.h"
+#include "mxc_v4l2_capture.h"
+
+#define MIN_FPS 15
+#define MAX_FPS 30
+#define DEFAULT_FPS 30
+
+#define OV7670_XCLK_MIN 6000000
+#define OV7670_XCLK_MAX 24000000
+
+/*
+ * The 7670 sits on i2c with ID 0x42
+ */
+#define OV7670_I2C_ADDR 0x42
+
+#define PLL_FACTOR	4
+
+/* Registers */
+#define REG_GAIN	0x00	/* Gain lower 8 bits (rest in vref) */
+#define REG_BLUE	0x01	/* blue gain */
+#define REG_RED		0x02	/* red gain */
+#define REG_VREF	0x03	/* Pieces of GAIN, VSTART, VSTOP */
+#define REG_COM1	0x04	/* Control 1 */
+#define  COM1_CCIR656	  0x40  /* CCIR656 enable */
+#define REG_BAVE	0x05	/* U/B Average level */
+#define REG_GbAVE	0x06	/* Y/Gb Average level */
+#define REG_AECHH	0x07	/* AEC MS 5 bits */
+#define REG_RAVE	0x08	/* V/R Average level */
+#define REG_COM2	0x09	/* Control 2 */
+#define  COM2_SSLEEP	  0x10	/* Soft sleep mode */
+#define REG_PID		0x0a	/* Product ID MSB */
+#define REG_VER		0x0b	/* Product ID LSB */
+#define REG_COM3	0x0c	/* Control 3 */
+#define  COM3_SWAP	  0x40	  /* Byte swap */
+#define  COM3_SCALEEN	  0x08	  /* Enable scaling */
+#define  COM3_DCWEN	  0x04	  /* Enable downsamp/crop/window */
+#define REG_COM4	0x0d	/* Control 4 */
+#define REG_COM5	0x0e	/* All "reserved" */
+#define REG_COM6	0x0f	/* Control 6 */
+#define REG_AECH	0x10	/* More bits of AEC value */
+#define REG_CLKRC	0x11	/* Clocl control */
+#define   CLK_EXT	  0x40	  /* Use external clock directly */
+#define   CLK_SCALE	  0x3f	  /* Mask for internal clock scale */
+#define REG_COM7	0x12	/* Control 7 */
+#define   COM7_RESET	  0x80	  /* Register reset */
+#define   COM7_FMT_MASK	  0x38
+#define   COM7_FMT_VGA	  0x00
+#define	  COM7_FMT_CIF	  0x20	  /* CIF format */
+#define   COM7_FMT_QVGA	  0x10	  /* QVGA format */
+#define   COM7_FMT_QCIF	  0x08	  /* QCIF format */
+#define	  COM7_RGB	  0x04	  /* bits 0 and 2 - RGB format */
+#define	  COM7_YUV	  0x00	  /* YUV */
+#define	  COM7_BAYER	  0x01	  /* Bayer format */
+#define	  COM7_PBAYER	  0x05	  /* "Processed bayer" */
+#define REG_COM8	0x13	/* Control 8 */
+#define   COM8_FASTAEC	  0x80	  /* Enable fast AGC/AEC */
+#define   COM8_AECSTEP	  0x40	  /* Unlimited AEC step size */
+#define   COM8_BFILT	  0x20	  /* Band filter enable */
+#define   COM8_AGC	  0x04	  /* Auto gain enable */
+#define   COM8_AWB	  0x02	  /* White balance enable */
+#define   COM8_AEC	  0x01	  /* Auto exposure enable */
+#define REG_COM9	0x14	/* Control 9  - gain ceiling */
+#define REG_COM10	0x15	/* Control 10 */
+#define   COM10_HSYNC	  0x40	  /* HSYNC instead of HREF */
+#define   COM10_PCLK_HB	  0x20	  /* Suppress PCLK on horiz blank */
+#define   COM10_HREF_REV  0x08	  /* Reverse HREF */
+#define   COM10_VS_LEAD	  0x04	  /* VSYNC on clock leading edge */
+#define   COM10_VS_NEG	  0x02	  /* VSYNC negative */
+#define   COM10_HS_NEG	  0x01	  /* HSYNC negative */
+#define REG_HSTART	0x17	/* Horiz start high bits */
+#define REG_HSTOP	0x18	/* Horiz stop high bits */
+#define REG_VSTART	0x19	/* Vert start high bits */
+#define REG_VSTOP	0x1a	/* Vert stop high bits */
+#define REG_PSHFT	0x1b	/* Pixel delay after HREF */
+#define REG_MIDH	0x1c	/* Manuf. ID high */
+#define REG_MIDL	0x1d	/* Manuf. ID low */
+#define REG_MVFP	0x1e	/* Mirror / vflip */
+#define   MVFP_MIRROR	  0x20	  /* Mirror image */
+#define   MVFP_FLIP	  0x10	  /* Vertical flip */
+
+#define REG_AEW		0x24	/* AGC upper limit */
+#define REG_AEB		0x25	/* AGC lower limit */
+#define REG_VPT		0x26	/* AGC/AEC fast mode op region */
+#define REG_HSYST	0x30	/* HSYNC rising edge delay */
+#define REG_HSYEN	0x31	/* HSYNC falling edge delay */
+#define REG_HREF	0x32	/* HREF pieces */
+#define REG_TSLB	0x3a	/* lots of stuff */
+#define   TSLB_YLAST	  0x04	  /* UYVY or VYUY - see com13 */
+#define REG_COM11	0x3b	/* Control 11 */
+#define   COM11_NIGHT	  0x80	  /* NIght mode enable */
+#define   COM11_NMFR	  0x60	  /* Two bit NM frame rate */
+#define   COM11_HZAUTO	  0x10	  /* Auto detect 50/60 Hz */
+#define	  COM11_50HZ	  0x08	  /* Manual 50Hz select */
+#define   COM11_EXP	  0x02
+#define REG_COM12	0x3c	/* Control 12 */
+#define   COM12_HREF	  0x80	  /* HREF always */
+#define REG_COM13	0x3d	/* Control 13 */
+#define   COM13_GAMMA	  0x80	  /* Gamma enable */
+#define	  COM13_UVSAT	  0x40	  /* UV saturation auto adjustment */
+#define   COM13_UVSWAP	  0x01	  /* V before U - w/TSLB */
+#define REG_COM14	0x3e	/* Control 14 */
+#define   COM14_DCWEN	  0x10	  /* DCW/PCLK-scale enable */
+#define REG_EDGE	0x3f	/* Edge enhancement factor */
+#define REG_COM15	0x40	/* Control 15 */
+#define   COM15_R10F0	  0x00	  /* Data range 10 to F0 */
+#define	  COM15_R01FE	  0x80	  /*            01 to FE */
+#define   COM15_R00FF	  0xc0	  /*            00 to FF */
+#define   COM15_RGB565	  0x10	  /* RGB565 output */
+#define   COM15_RGB555	  0x30	  /* RGB555 output */
+#define REG_COM16	0x41	/* Control 16 */
+#define   COM16_AWBGAIN   0x08	  /* AWB gain enable */
+#define REG_COM17	0x42	/* Control 17 */
+#define   COM17_AECWIN	  0xc0	  /* AEC window - must match COM4 */
+#define   COM17_CBAR	  0x08	  /* DSP Color bar */
+
+/*
+ * This matrix defines how the colors are generated, must be
+ * tweaked to adjust hue and saturation.
+ *
+ * Order: v-red, v-green, v-blue, u-red, u-green, u-blue
+ *
+ * They are nine-bit signed quantities, with the sign bit
+ * stored in 0x58.  Sign for v-red is bit 0, and up from there.
+ */
+#define	REG_CMATRIX_BASE 0x4f
+#define   CMATRIX_LEN 6
+#define REG_CMATRIX_SIGN 0x58
+
+
+#define REG_BRIGHT	0x55	/* Brightness */
+#define REG_CONTRAS	0x56	/* Contrast control */
+
+#define REG_GFIX	0x69	/* Fix gain control */
+
+#define REG_DBLV	0x6b	/* PLL control an debugging */
+#define   DBLV_BYPASS	  0x00	  /* Bypass PLL */
+#define   DBLV_X4	  0x01	  /* clock x4 */
+#define   DBLV_X6	  0x10	  /* clock x6 */
+#define   DBLV_X8	  0x11	  /* clock x8 */
+
+#define REG_REG76	0x76	/* OV's name */
+#define   R76_BLKPCOR	  0x80	  /* Black pixel correction enable */
+#define   R76_WHTPCOR	  0x40	  /* White pixel correction enable */
+
+#define REG_RGB444	0x8c	/* RGB 444 control */
+#define   R444_ENABLE	  0x02	  /* Turn on RGB444, overrides 5x5 */
+#define   R444_RGBX	  0x01	  /* Empty nibble at end */
+
+#define REG_HAECC1	0x9f	/* Hist AEC/AGC control 1 */
+#define REG_HAECC2	0xa0	/* Hist AEC/AGC control 2 */
+
+#define REG_BD50MAX	0xa5	/* 50hz banding step limit */
+#define REG_HAECC3	0xa6	/* Hist AEC/AGC control 3 */
+#define REG_HAECC4	0xa7	/* Hist AEC/AGC control 4 */
+#define REG_HAECC5	0xa8	/* Hist AEC/AGC control 5 */
+#define REG_HAECC6	0xa9	/* Hist AEC/AGC control 6 */
+#define REG_HAECC7	0xaa	/* Hist AEC/AGC control 7 */
+#define REG_BD60MAX	0xab	/* 60hz banding step limit */
+
+enum ov7670_model {
+	MODEL_OV7670 = 0,
+	MODEL_OV7675,
+};
+
+enum ov7670_mode {
+	ov7670_modeMIN = 0,
+	ov7670_modeVGA_640_480 = 0,
+	ov7670_modeQVGA_320_240 = 1,
+	ov7670_mode_MAX = 2
+};
+
+enum ov7670_frame_rate {
+	ov7670_15_fps,
+	ov7670_30_fps
+};
+
+static int ov7670_framerates[] = {
+	[ov7670_15_fps] = 15,
+	[ov7670_30_fps] = 30,
+};
+
+struct reg_value {
+	u16 u16RegAddr;
+	u8 u8Val;
+	u8 u8Mask;
+	u32 u32Delay_ms;
+};
+
+struct ov7670_mode_info {
+	enum ov7670_mode mode;
+	u32 width;
+	u32 height;
+	struct reg_value *init_data_ptr;
+	u32 init_data_size;
+};
+
+/*!
+ * Maintains the information on the current state of the sesor.
+ */
+static struct sensor_data ov7670_data;
+//static int pwn_gpio, rst_gpio;
+//static int prev_sysclk;
+static int AE_Target = 52, night_mode;
+//static int prev_HTS;
+//static int AE_high, AE_low;
+
+/* OV7675 Register dump from Omnivision Panther Tool */
+static struct reg_value ov7670_global_init_setting[] = {
+	{ 0x00, 0x05, 0, 0 }, { 0x00, 0x78, 0, 0 }, { 0x00, 0x48, 0, 0 },
+	{ 0x00, 0x0a, 0, 0 }, { 0x00, 0x03, 0, 0 }, { 0x05, 0x6e, 0, 0 },
+	{ 0x06, 0x56, 0, 0 }, { 0x07, 0x00, 0, 0 }, { 0x08, 0x6e, 0, 0 },
+	{ 0x09, 0x00, 0, 0 }, { 0x0a, 0x76, 0, 0 },	{ 0x0b, 0x73, 0, 0 },
+	{ 0x0c, 0x00, 0, 0 }, { 0x0d, 0x40, 0, 0 },	{ 0x0e, 0x61, 0, 0 },
+	{ 0x0f, 0x4b, 0, 0 }, { 0x10, 0x72, 0, 0 },	{ 0x11, 0x80, 0, 0 },
+	{ 0x12, 0x00, 0, 0 }, { 0x13, 0xe7, 0, 0 },	{ 0x14, 0x28, 0, 0 },
+	{ 0x15, 0x00, 0, 0 }, { 0x16, 0x02, 0, 0 }, { 0x17, 0x13, 0, 0 },
+	{ 0x18, 0x01, 0, 0 }, { 0x19, 0x03, 0, 0 },	{ 0x1a, 0x7b, 0, 0 },
+	{ 0x1b, 0x08, 0, 0 }, { 0x1c, 0x7f, 0, 0 },	{ 0x1d, 0xa2, 0, 0 },
+	{ 0x1e, 0x37, 0, 0 }, { 0x1f, 0x00, 0, 0 },	{ 0x20, 0x00, 0, 0 },
+	{ 0x21, 0x00, 0, 0 }, { 0x22, 0x00, 0, 0 },	{ 0x23, 0x00, 0, 0 },
+	{ 0x24, 0x40, 0, 0 }, { 0x25, 0x38, 0, 0 },	{ 0x26, 0x91, 0, 0 },
+	{ 0x27, 0x80, 0, 0 }, { 0x28, 0x80, 0, 0 },	{ 0x29, 0x07, 0, 0 },
+	{ 0x2a, 0x00, 0, 0 }, { 0x2b, 0x00, 0, 0 }, { 0x2c, 0x80, 0, 0 },
+	{ 0x2d, 0x00, 0, 0 }, { 0x2e, 0x00, 0, 0 },	{ 0x2f, 0x3d, 0, 0 },
+	{ 0x30, 0x0b, 0, 0 }, { 0x31, 0x30, 0, 0 }, { 0x32, 0xbf, 0, 0 },
+	{ 0x33, 0xbf, 0, 0 }, { 0x34, 0xbf, 0, 0 }, { 0x35, 0xbf, 0, 0 },
+	{ 0x36, 0x00, 0, 0 }, { 0x37, 0x00, 0, 0 }, { 0x38, 0x00, 0, 0 },
+	{ 0x39, 0x2a, 0, 0 }, { 0x3a, 0x04, 0, 0 }, { 0x3b, 0x12, 0, 0 },
+	{ 0x3c, 0x78, 0, 0 }, { 0x3d, 0xc3, 0, 0 }, { 0x3e, 0x00, 0, 0 },
+	{ 0x3f, 0x03, 0, 0 }, { 0x40, 0xc0, 0, 0 }, { 0x41, 0x38, 0, 0 },
+	{ 0x42, 0x00, 0, 0 }, { 0x43, 0x0a, 0, 0 }, { 0x44, 0xf2, 0, 0 },
+	{ 0x45, 0x39, 0, 0 }, { 0x46, 0x62, 0, 0 }, { 0x47, 0x3d, 0, 0 },
+	{ 0x48, 0x55, 0, 0 }, { 0x49, 0x00, 0, 0 }, { 0x4a, 0x00, 0, 0 },
+	{ 0x4b, 0x09, 0, 0 }, { 0x4c, 0x03, 0, 0 }, { 0x4d, 0x40, 0, 0 },
+	{ 0x4e, 0x20, 0, 0 }, { 0x4f, 0x87, 0, 0 }, { 0x50, 0x68, 0, 0 },
+	{ 0x51, 0x1e, 0, 0 }, { 0x52, 0x15, 0, 0 }, { 0x53, 0x7c, 0, 0 },
+	{ 0x54, 0x91, 0, 0 }, { 0x55, 0x00, 0, 0 }, { 0x56, 0x40, 0, 0 },
+	{ 0x57, 0x80, 0, 0 }, { 0x58, 0x1e, 0, 0 }, { 0x59, 0x83, 0, 0 },
+	{ 0x5a, 0x0d, 0, 0 }, { 0x5b, 0xcd, 0, 0 }, { 0x5c, 0x8c, 0, 0 },
+	{ 0x5d, 0x77, 0, 0 }, { 0x5e, 0x16, 0, 0 }, { 0x5f, 0xf0, 0, 0 },
+	{ 0x60, 0xf0, 0, 0 }, { 0x61, 0xf0, 0, 0 }, { 0x62, 0x10, 0, 0 },
+	{ 0x63, 0x0b, 0, 0 }, { 0x64, 0x0f, 0, 0 }, { 0x65, 0x07, 0, 0 },
+	{ 0x66, 0x05, 0, 0 }, { 0x67, 0x80, 0, 0 },	{ 0x68, 0x80, 0, 0 },
+	{ 0x69, 0x00, 0, 0 }, { 0x6a, 0x40, 0, 0 }, { 0x6b, 0x0a, 0, 0 },
+	{ 0x6c, 0x0a, 0, 0 }, { 0x6d, 0x65, 0, 0 }, { 0x6e, 0x11, 0, 0 },
+	{ 0x6f, 0x9e, 0, 0 }, { 0x70, 0x3a, 0, 0 }, { 0x71, 0x35, 0, 0 },
+	{ 0x72, 0x11, 0, 0 }, { 0x73, 0xf0, 0, 0 }, { 0x74, 0x10, 0, 0 },
+	{ 0x75, 0x04, 0, 0 }, { 0x76, 0xe0, 0, 0 }, { 0x77, 0x01, 0, 0 },
+	{ 0x78, 0x04, 0, 0 }, { 0x79, 0x26, 0, 0 }, { 0x7a, 0x09, 0, 0 },
+	{ 0x7b, 0x0c, 0, 0 }, { 0x7c, 0x16, 0, 0 }, { 0x7d, 0x28, 0, 0 },
+	{ 0x7e, 0x48, 0, 0 }, { 0x7f, 0x57, 0, 0 }, { 0x80, 0x64, 0, 0 },
+	{ 0x81, 0x71, 0, 0 }, { 0x82, 0x7e, 0, 0 }, { 0x83, 0x89, 0, 0 },
+	{ 0x84, 0x94, 0, 0 }, { 0x85, 0xa8, 0, 0 }, { 0x86, 0xba, 0, 0 },
+	{ 0x87, 0xd7, 0, 0 }, { 0x88, 0xec, 0, 0 }, { 0x89, 0xf9, 0, 0 },
+	{ 0x8a, 0x00, 0, 0 }, { 0x8b, 0x00, 0, 0 }, { 0x8c, 0x00, 0, 0 },
+	{ 0x8d, 0x4f, 0, 0 }, { 0x8e, 0x4f, 0, 0 }, { 0x8f, 0x4f, 0, 0 },
+	{ 0x90, 0x4f, 0, 0 }, { 0x91, 0x4f, 0, 0 }, { 0x92, 0x00, 0, 0 },
+	{ 0x93, 0x00, 0, 0 }, { 0x94, 0x0e, 0, 0 }, { 0x95, 0x10, 0, 0 },
+	{ 0x96, 0x10, 0, 0 }, { 0x97, 0x10, 0, 0 }, { 0x98, 0x10, 0, 0 },
+	{ 0x99, 0x10, 0, 0 }, { 0x9a, 0x10, 0, 0 }, { 0x9b, 0x10, 0, 0 },
+	{ 0x9c, 0x10, 0, 0 }, { 0x9d, 0x99, 0, 0 }, { 0x9e, 0x7f, 0, 0 },
+	{ 0x9f, 0x78, 0, 0 }, { 0xa0, 0x68, 0, 0 }, { 0xa1, 0x03, 0, 0 },
+	{ 0xa2, 0x02, 0, 0 }, { 0xa3, 0x04, 0, 0 }, { 0xa4, 0x88, 0, 0 },
+	{ 0xa5, 0x02, 0, 0 }, { 0xa6, 0x02, 0, 0 }, { 0xa7, 0x02, 0, 0 },
+	{ 0xa8, 0x02, 0, 0 }, { 0xa9, 0x02, 0, 0 }, { 0xaa, 0x02, 0, 0 },
+	{ 0xab, 0x02, 0, 0 }, { 0xac, 0x02, 0, 0 }, { 0xad, 0x00, 0, 0 },
+	{ 0xae, 0x00, 0, 0 }, { 0xaf, 0x00, 0, 0 }, { 0xb0, 0x00, 0, 0 },
+	{ 0xb1, 0x00, 0, 0 }, { 0xb2, 0x00, 0, 0 }, { 0xb3, 0x00, 0, 0 },
+	{ 0xb4, 0x00, 0, 0 }, { 0xb5, 0x00, 0, 0 }, { 0xb6, 0x00, 0, 0 },
+	{ 0xb7, 0x26, 0, 0 }, { 0xb8, 0x0a, 0, 0 }, { 0xb9, 0x00, 0, 0 },
+	{ 0xba, 0x00, 0, 0 }, { 0xbb, 0xa1, 0, 0 }, { 0xbc, 0x12, 0, 0 },
+	{ 0xbd, 0x00, 0, 0 }, { 0xbe, 0x00, 0, 0 }, { 0xbf, 0x00, 0, 0 },
+	{ 0xc0, 0x00, 0, 0 }, { 0xc1, 0x7f, 0, 0 }, { 0xc2, 0xef, 0, 0 },
+	{ 0xc3, 0x11, 0, 0 }, { 0xc4, 0x00, 0, 0 }, { 0xc5, 0x00, 0, 0 },
+	{ 0xc6, 0x00, 0, 0 }, { 0xc7, 0x00, 0, 0 }, { 0xc8, 0x00, 0, 0 },
+	{ 0xc9, 0x38, 0, 0 }, { 0xca, 0x00, 0, 0 }, { 0xcb, 0x20, 0, 0 },
+	{ 0xcc, 0x00, 0, 0 }, { 0xcd, 0x03, 0, 0 }, { 0xce, 0x00, 0, 0 },
+	{ 0xcf, 0x84, 0, 0 }, { 0xd0, 0x32, 0, 0 }, { 0xd1, 0x0c, 0, 0 },
+	{ 0xd2, 0x1c, 0, 0 }, { 0xd3, 0x00, 0, 0 }, { 0xd4, 0x84, 0, 0 },
+	{ 0xd5, 0x00, 0, 0 }, { 0xd6, 0x18, 0, 0 }, { 0xd7, 0x10, 0, 0 },
+	{ 0xd8, 0x00, 0, 0 }, { 0xd9, 0xc2, 0, 0 }, { 0xda, 0x40, 0, 0 },
+	{ 0xdb, 0x84, 0, 0 }, { 0xdc, 0x32, 0, 0 }, { 0xdd, 0x42, 0, 0 },
+	{ 0xde, 0x04, 0, 0 }, { 0xdf, 0x00, 0, 0 }, { 0xe0, 0x00, 0, 0 },
+	{ 0xe1, 0x40, 0, 0 }, { 0xe2, 0x00, 0, 0 }, { 0xe3, 0x00, 0, 0 },
+	{ 0xe4, 0x00, 0, 0 }, { 0xe5, 0xeb, 0, 0 }, { 0xe6, 0x00, 0, 0 },
+	{ 0xe7, 0x0a, 0, 0 }, { 0xe8, 0x15, 0, 0 }, { 0xe9, 0x00, 0, 0 },
+	{ 0xea, 0x10, 0, 0 }, { 0xeb, 0x10, 0, 0 }, { 0xec, 0x10, 0, 0 },
+	{ 0xed, 0x00, 0, 0 }, { 0xee, 0xff, 0, 0 }, { 0xef, 0x0f, 0, 0 },
+	{ 0xf0, 0x00, 0, 0 }, { 0xf1, 0x00, 0, 0 }, { 0xf2, 0x00, 0, 0 },
+	{ 0xf3, 0x01, 0, 0 }, { 0xf4, 0x04, 0, 0 }, { 0xf5, 0x00, 0, 0 },
+	{ 0xf6, 0x21, 0, 0 }, { 0xf7, 0x0c, 0, 0 }, { 0xf8, 0x01, 0, 0 },
+	{ 0xf9, 0x5d, 0, 0 }, { 0xfa, 0x01, 0, 0 }, { 0xfb, 0x5e, 0, 0 },
+	{ 0xfc, 0x01, 0, 0 }, { 0xfd, 0x5d, 0, 0 }, { 0xfe, 0x01, 0, 0 },
+	{ 0xff, 0x5d, 0, 0 }
+};
+
+static struct reg_value ov7670_setting_30fps_VGA_640_480[] = {
+	{0x3c07, 0x08, 0, 0}, {0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0},
+	{0x3814, 0x31, 0, 0}, {0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0},
+	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0},
+	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
+	{0x3807, 0x9b, 0, 0}, {0x3808, 0x02, 0, 0}, {0x3809, 0x80, 0, 0},
+	{0x380a, 0x01, 0, 0}, {0x380b, 0xe0, 0, 0}, {0x380c, 0x07, 0, 0},
+	{0x380d, 0x68, 0, 0}, {0x380e, 0x03, 0, 0}, {0x380f, 0xd8, 0, 0},
+	{0x3813, 0x06, 0, 0}, {0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0},
+	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x0b, 0, 0},
+	{0x3a03, 0x88, 0, 0}, {0x3a14, 0x0b, 0, 0}, {0x3a15, 0x88, 0, 0},
+	{0x4004, 0x02, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
+	{0x4713, 0x03, 0, 0}, {0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0},
+	{0x460c, 0x22, 0, 0}, {0x4837, 0x22, 0, 0}, {0x3824, 0x02, 0, 0},
+	{0x5001, 0xa3, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x11, 0, 0},
+	{0x3036, 0x46, 0, 0}, {0x3037, 0x13, 0, 0}, {0x3503, 0x00, 0, 0},
+};
+
+static struct reg_value ov7670_setting_15fps_VGA_640_480[] = {
+	{0x3c07, 0x08, 0, 0}, {0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0},
+	{0x3814, 0x31, 0, 0}, {0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0},
+	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0},
+	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
+	{0x3807, 0x9b, 0, 0}, {0x3808, 0x02, 0, 0}, {0x3809, 0x80, 0, 0},
+	{0x380a, 0x01, 0, 0}, {0x380b, 0xe0, 0, 0}, {0x380c, 0x07, 0, 0},
+	{0x380d, 0x68, 0, 0}, {0x380e, 0x03, 0, 0}, {0x380f, 0xd8, 0, 0},
+	{0x3813, 0x06, 0, 0}, {0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0},
+	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x0b, 0, 0},
+	{0x3a03, 0x88, 0, 0}, {0x3a14, 0x0b, 0, 0}, {0x3a15, 0x88, 0, 0},
+	{0x4004, 0x02, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
+	{0x4713, 0x03, 0, 0}, {0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0},
+	{0x460c, 0x22, 0, 0}, {0x4837, 0x22, 0, 0}, {0x3824, 0x02, 0, 0},
+	{0x5001, 0xa3, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x21, 0, 0},
+	{0x3036, 0x46, 0, 0}, {0x3037, 0x13, 0, 0}, {0x3503, 0x00, 0, 0},
+};
+
+static struct reg_value ov7670_setting_30fps_QVGA_320_240[] = {
+	{0x3c07, 0x08, 0, 0}, {0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0},
+	{0x3814, 0x31, 0, 0}, {0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0},
+	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0},
+	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
+	{0x3807, 0x9b, 0, 0}, {0x3808, 0x01, 0, 0}, {0x3809, 0x40, 0, 0},
+	{0x380a, 0x00, 0, 0}, {0x380b, 0xf0, 0, 0}, {0x380c, 0x07, 0, 0},
+	{0x380d, 0x68, 0, 0}, {0x380e, 0x03, 0, 0}, {0x380f, 0xd8, 0, 0},
+	{0x3813, 0x06, 0, 0}, {0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0},
+	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x0b, 0, 0},
+	{0x3a03, 0x88, 0, 0}, {0x3a14, 0x0b, 0, 0}, {0x3a15, 0x88, 0, 0},
+	{0x4004, 0x02, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
+	{0x4713, 0x03, 0, 0}, {0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0},
+	{0x460c, 0x22, 0, 0}, {0x4837, 0x22, 0, 0}, {0x3824, 0x02, 0, 0},
+	{0x5001, 0xa3, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x11, 0, 0},
+	{0x3036, 0x46, 0, 0}, {0x3037, 0x13, 0, 0},
+};
+
+static struct reg_value ov7670_setting_15fps_QVGA_320_240[] = {
+	{0x3c07, 0x08, 0, 0}, {0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0},
+	{0x3814, 0x31, 0, 0}, {0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0},
+	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0},
+	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
+	{0x3807, 0x9b, 0, 0}, {0x3808, 0x01, 0, 0}, {0x3809, 0x40, 0, 0},
+	{0x380a, 0x00, 0, 0}, {0x380b, 0xf0, 0, 0}, {0x380c, 0x07, 0, 0},
+	{0x380d, 0x68, 0, 0}, {0x380e, 0x03, 0, 0}, {0x380f, 0xd8, 0, 0},
+	{0x3813, 0x06, 0, 0}, {0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0},
+	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x0b, 0, 0},
+	{0x3a03, 0x88, 0, 0}, {0x3a14, 0x0b, 0, 0}, {0x3a15, 0x88, 0, 0},
+	{0x4004, 0x02, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
+	{0x4713, 0x03, 0, 0}, {0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0},
+	{0x460c, 0x22, 0, 0}, {0x4837, 0x22, 0, 0}, {0x3824, 0x02, 0, 0},
+	{0x5001, 0xa3, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x21, 0, 0},
+	{0x3036, 0x46, 0, 0}, {0x3037, 0x13, 0, 0},
+};
+
+static struct ov7670_mode_info ov7670_mode_info_data[2][ov7670_mode_MAX + 1] = {
+	{
+		{ov7670_modeVGA_640_480,      640,  480,
+		ov7670_setting_15fps_VGA_640_480,
+		ARRAY_SIZE(ov7670_setting_15fps_VGA_640_480)},
+		{ov7670_modeQVGA_320_240,     320,  240,
+		ov7670_setting_15fps_QVGA_320_240,
+		ARRAY_SIZE(ov7670_setting_15fps_QVGA_320_240)},
+	},
+	{
+		{ov7670_modeVGA_640_480,      640,  480,
+		ov7670_setting_30fps_VGA_640_480,
+		ARRAY_SIZE(ov7670_setting_30fps_VGA_640_480)},
+		{ov7670_modeQVGA_320_240,     320,  240,
+		ov7670_setting_30fps_QVGA_320_240,
+		ARRAY_SIZE(ov7670_setting_30fps_QVGA_320_240)},
+	},
+};
+
+static struct regulator *io_regulator;
+static struct regulator *core_regulator;
+static struct regulator *analog_regulator;
+
+static int ov7670_probe(struct i2c_client *adapter,
+				const struct i2c_device_id *device_id);
+static int ov7670_remove(struct i2c_client *client);
+
+static s32 ov7670_read_reg(u8 reg, u8 *val);
+static s32 ov7670_write_reg(u8 reg, u8 val);
+
+static const struct i2c_device_id ov7670_id[] = {
+	{"ov564x", 0},
+	{},
+};
+
+MODULE_DEVICE_TABLE(i2c, ov7670_id);
+
+static struct i2c_driver ov7670_i2c_driver = {
+	.driver = {
+		  .owner = THIS_MODULE,
+		  .name  = "ov767x",
+		  },
+	.probe  = ov7670_probe,
+	.remove = ov7670_remove,
+	.id_table = ov7670_id,
+};
+
+static inline void ov7670_power_down(int enable)
+{
+}
+
+static inline void ov7670_reset(void)
+{
+	/* camera reset */
+	ov7670_write_reg(REG_COM7, COM7_RESET);	
+	msleep(5);	
+}
+
+static int ov7670_regulator_enable(struct device *dev)
+{
+	int ret = 0;
+
+	return ret;
+}
+
+static s32 ov7670_write_reg(u8 reg, u8 val)
+{
+	u8 au8Buf[2] = {0};
+
+	//au8Buf[0] = reg >> 8;
+	au8Buf[0] = reg;
+	au8Buf[1] = val;
+
+	if (i2c_master_send(ov7670_data.i2c_client, au8Buf, 2) < 0) {
+		pr_err("%s:write reg error:reg=%x,val=%x\n",
+			__func__, reg, val);
+		return -1;
+	}
+
+	return 0;
+}
+
+static s32 ov7670_read_reg(u8 reg, u8 *val)
+{
+	u8 au8RegBuf[2] = {0};
+	u8 u8RdVal = 0;
+
+	au8RegBuf[0] = reg;
+
+	if (2 != i2c_master_send(ov7670_data.i2c_client, au8RegBuf, 1)) {
+		pr_err("%s:write reg error:reg=%x\n",
+				__func__, reg);
+		return -1;
+	}
+
+	if (1 != i2c_master_recv(ov7670_data.i2c_client, &u8RdVal, 1)) {
+		pr_err("%s:read reg error:reg=%x,val=%x\n",
+				__func__, reg, u8RdVal);
+		return -1;
+	}
+
+	*val = u8RdVal;
+
+	return u8RdVal;
+}
+
+static void ov7670_soft_reset(void)
+{
+	/* camera reset */
+	// ov7670_write(sd, REG_COM7, COM7_RESET);
+	ov7670_write_reg(REG_COM7, COM7_RESET);	
+	
+	msleep(5);	
+}
+
+/* set sensor driver capability
+ * 0x302c[7:6] - strength
+	00     - 1x
+	01     - 2x
+	10     - 3x
+	11     - 4x
+ */
+static int ov7670_driver_capability(int strength)
+{
+	return 0;
+}
+
+#if 0
+/* calculate sysclk */
+static int ov7670_get_sysclk(void)
+{
+	int sysclk = 0;
+
+	return sysclk;
+}
+#endif
+
+#if 0
+/* read HTS from register settings */
+static int ov7670_get_HTS(void)
+{
+	int HTS;
+/*
+	u8 temp = 0;
+
+	HTS = ov7670_read_reg(0x380c, &temp);
+	HTS = (HTS<<8) + ov7670_read_reg(0x380d, &temp);
+*/
+	return HTS;
+}
+#endif
+
+#if 0
+/* read VTS from register settings */
+static int ov7670_get_VTS(void)
+{
+	int VTS;
+/*
+	u8 temp = 0;
+
+	VTS = ov7670_read_reg(0x380e, &temp);
+	VTS = (VTS<<8) + ov7670_read_reg(0x380f, &temp);
+*/
+	return VTS;
+}
+#endif
+
+#if 0
+/* write VTS to registers */
+static int ov7670_set_VTS(int VTS)
+{
+	int temp;
+/*
+	temp = VTS & 0xff;
+	ov7670_write_reg(0x380f, temp);
+
+	temp = VTS>>8;
+	ov7670_write_reg(0x380e, temp);
+*/
+	return 0;
+}
+#endif
+
+#if 0
+/* read shutter, in number of line period */
+static int ov7670_get_shutter(void)
+{
+	int shutter;
+/*
+	u8 regval;
+
+	shutter = (ov7670_read_reg(0x03500, &regval) & 0x0f);
+
+	shutter = (shutter<<8) + ov7670_read_reg(0x3501, &regval);
+	shutter = (shutter<<4) + (ov7670_read_reg(0x3502, &regval)>>4);
+*/
+	return shutter;
+}
+#endif
+
+#if 0
+/* write shutter, in number of line period */
+static int ov7670_set_shutter(int shutter)
+{
+	int temp;
+/*
+	shutter = shutter & 0xffff;
+	temp = shutter & 0x0f;
+	temp = temp<<4;
+	ov7670_write_reg(0x3502, temp);
+
+	temp = shutter & 0xfff;
+	temp = temp>>4;
+	ov7670_write_reg(0x3501, temp);
+
+	temp = shutter>>12;
+	ov7670_write_reg(0x3500, temp);
+*/
+	return 0;
+}
+#endif
+
+#if 0
+/* read gain, 16 = 1x */
+static int ov7670_get_gain16(void)
+{
+	int gain16;
+/*
+ 	u8 regval;
+
+	gain16 = ov7670_read_reg(0x350a, &regval) & 0x03;
+	gain16 = (gain16<<8) + ov7670_read_reg(0x350b, &regval);
+*/
+	return gain16;
+}
+#endif
+
+#if 0
+/* write gain, 16 = 1x */
+static int ov7670_set_gain16(int gain16)
+{
+	int temp;
+/*
+	gain16 = gain16 & 0x3ff;
+	temp = gain16 & 0xff;
+
+	ov7670_write_reg(0x350b, temp);
+	temp = gain16>>8;
+
+	ov7670_write_reg(0x350a, temp);
+*/ 
+	return 0;
+}
+#endif
+
+#if 0
+/* get banding filter value */
+static int ov7670_get_light_freq(void)
+{
+	int temp, temp1, light_frequency;
+	u8 regval;
+
+	return light_frequency;
+}
+#endif
+
+static void ov7670_set_bandingfilter(void)
+{
+}
+
+/* stable in high */
+static int ov7670_set_AE_target(int target)
+{
+	return 0;
+}
+
+/* enable = 0 to turn off night mode
+   enable = 1 to turn on night mode */
+static int ov7670_set_night_mode(int enable)
+{
+	return 0;
+}
+
+#if 0
+/* enable = 0 to turn off AEC/AGC
+   enable = 1 to turn on AEC/AGC */
+static void ov7670_turn_on_AE_AG(int enable)
+{
+}
+#endif
+
+/* download ov7670 settings to sensor through i2c */
+static int ov7670_download_firmware(struct reg_value *pModeSetting, s32 ArySize)
+{
+	register u32 Delay_ms = 0;
+	register u16 RegAddr = 0;
+	register u8 Mask = 0;
+	register u8 Val = 0;
+	u8 RegVal = 0;
+	int i, retval = 0;
+
+	for (i = 0; i < ArySize; ++i, ++pModeSetting) {
+		Delay_ms = pModeSetting->u32Delay_ms;
+		RegAddr = pModeSetting->u16RegAddr;
+		Val = pModeSetting->u8Val;
+		Mask = pModeSetting->u8Mask;
+
+		if (Mask) {
+			retval = ov7670_read_reg(RegAddr, &RegVal);
+			if (retval < 0)
+				goto err;
+
+			RegVal &= ~(u8)Mask;
+			Val &= Mask;
+			Val |= RegVal;
+		}
+
+		retval = ov7670_write_reg(RegAddr, Val);
+		if (retval < 0)
+			goto err;
+
+		if (Delay_ms)
+			msleep(Delay_ms);
+	}
+
+err:
+	return retval;
+}
+
+static int ov7670_init_mode(void)
+{
+	struct reg_value *pModeSetting = NULL;
+	int ArySize = 0, retval = 0;
+	
+	pr_debug("ov7670_init_mode\n");
+
+	ov7670_soft_reset();
+
+	pModeSetting = ov7670_global_init_setting;
+	ArySize = ARRAY_SIZE(ov7670_global_init_setting);
+	retval = ov7670_download_firmware(pModeSetting, ArySize);
+	if (retval < 0)
+		goto err;
+
+#if 0
+	pModeSetting = ov7670_init_setting_30fps_VGA;
+	ArySize = ARRAY_SIZE(ov7670_init_setting_30fps_VGA);
+	retval = ov7670_download_firmware(pModeSetting, ArySize);
+	if (retval < 0)
+		goto err;
+#endif
+	/* change driver capability to 2x according to validation board.
+	 * if the image is not stable, please increase the driver strength.
+	 */
+	ov7670_driver_capability(2);
+	ov7670_set_bandingfilter();
+	ov7670_set_AE_target(AE_Target);
+	ov7670_set_night_mode(night_mode);
+
+	/* skip 9 vysnc: start capture at 10th vsync */
+	msleep(300);
+
+	/* turn off night mode */
+	night_mode = 0;
+	ov7670_data.pix.width = 640;
+	ov7670_data.pix.height = 480;
+err:
+	return retval;
+}
+
+#if 0
+/* change to or back to subsampling mode set the mode directly
+ * image size below 1280 * 960 is subsampling mode */
+static int ov7670_change_mode_direct(enum ov7670_frame_rate frame_rate,
+			    enum ov7670_mode mode)
+{
+	struct reg_value *pModeSetting = NULL;
+	s32 ArySize = 0;
+	int retval = 0;
+
+	return retval;
+}
+#endif
+
+#if 0
+/* change to scaling mode go through exposure calucation
+ * image size above 1280 * 960 is scaling mode */
+static int ov7670_change_mode_exposure_calc(enum ov7670_frame_rate frame_rate,
+			    enum ov7670_mode mode)
+{
+	int prev_shutter, prev_gain16, average;
+	int cap_shutter, cap_gain16;
+	int cap_sysclk, cap_HTS, cap_VTS;
+	int light_freq, cap_bandfilt, cap_maxband;
+	long cap_gain16_shutter;
+	u8 temp;
+	struct reg_value *pModeSetting = NULL;
+	s32 ArySize = 0;
+	int retval = 0;
+	
+err:
+	return retval;
+}
+#endif
+
+static int ov7670_change_mode(enum ov7670_frame_rate frame_rate,
+			    enum ov7670_mode mode)
+{
+	int retval = 0;
+
+	return retval;
+}
+
+/* --------------- IOCTL functions from v4l2_int_ioctl_desc --------------- */
+
+static int ioctl_g_ifparm(struct v4l2_int_device *s, struct v4l2_ifparm *p)
+{
+	if (s == NULL) {
+		pr_err("   ERROR!! no slave device set!\n");
+		return -1;
+	}
+
+	memset(p, 0, sizeof(*p));
+	p->u.bt656.clock_curr = ov7670_data.mclk;
+	pr_debug("   clock_curr=mclk=%d\n", ov7670_data.mclk);
+	p->if_type = V4L2_IF_TYPE_BT656;
+	p->u.bt656.mode = V4L2_IF_TYPE_BT656_MODE_NOBT_8BIT;
+	p->u.bt656.clock_min = OV7670_XCLK_MIN;
+	p->u.bt656.clock_max = OV7670_XCLK_MAX;
+	p->u.bt656.bt_sync_correct = 1;  /* Indicate external vsync */
+
+	return 0;
+}
+
+/*!
+ * ioctl_s_power - V4L2 sensor interface handler for VIDIOC_S_POWER ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @on: indicates power mode (on or off)
+ *
+ * Turns the power on or off, depending on the value of on and returns the
+ * appropriate error code.
+ */
+static int ioctl_s_power(struct v4l2_int_device *s, int on)
+{
+	struct sensor_data *sensor = s->priv;
+
+	if (on && !sensor->on) {
+		if (io_regulator)
+			if (regulator_enable(io_regulator) != 0)
+				return -EIO;
+		if (core_regulator)
+			if (regulator_enable(core_regulator) != 0)
+				return -EIO;
+		if (analog_regulator)
+			if (regulator_enable(analog_regulator) != 0)
+				return -EIO;
+		/* Make sure power on */
+		ov7670_power_down(0);
+	} else if (!on && sensor->on) {
+		if (analog_regulator)
+			regulator_disable(analog_regulator);
+		if (core_regulator)
+			regulator_disable(core_regulator);
+		if (io_regulator)
+			regulator_disable(io_regulator);
+
+		ov7670_power_down(1);
+}
+
+	sensor->on = on;
+
+	return 0;
+}
+
+/*!
+ * ioctl_g_parm - V4L2 sensor interface handler for VIDIOC_G_PARM ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @a: pointer to standard V4L2 VIDIOC_G_PARM ioctl structure
+ *
+ * Returns the sensor's video CAPTURE parameters.
+ */
+static int ioctl_g_parm(struct v4l2_int_device *s, struct v4l2_streamparm *a)
+{
+	struct sensor_data *sensor = s->priv;
+	struct v4l2_captureparm *cparm = &a->parm.capture;
+	int ret = 0;
+
+	switch (a->type) {
+	/* This is the only case currently handled. */
+	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
+		memset(a, 0, sizeof(*a));
+		a->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+		cparm->capability = sensor->streamcap.capability;
+		cparm->timeperframe = sensor->streamcap.timeperframe;
+		cparm->capturemode = sensor->streamcap.capturemode;
+		ret = 0;
+		break;
+
+	/* These are all the possible cases. */
+	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
+	case V4L2_BUF_TYPE_VIDEO_OVERLAY:
+	case V4L2_BUF_TYPE_VBI_CAPTURE:
+	case V4L2_BUF_TYPE_VBI_OUTPUT:
+	case V4L2_BUF_TYPE_SLICED_VBI_CAPTURE:
+	case V4L2_BUF_TYPE_SLICED_VBI_OUTPUT:
+		ret = -EINVAL;
+		break;
+
+	default:
+		pr_debug("   type is unknown - %d\n", a->type);
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+/*!
+ * ioctl_s_parm - V4L2 sensor interface handler for VIDIOC_S_PARM ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @a: pointer to standard V4L2 VIDIOC_S_PARM ioctl structure
+ *
+ * Configures the sensor to use the input parameters, if possible.  If
+ * not possible, reverts to the old parameters and returns the
+ * appropriate error code.
+ */
+static int ioctl_s_parm(struct v4l2_int_device *s, struct v4l2_streamparm *a)
+{
+	struct sensor_data *sensor = s->priv;
+	struct v4l2_fract *timeperframe = &a->parm.capture.timeperframe;
+	u32 tgt_fps;	/* target frames per secound */
+	enum ov7670_frame_rate frame_rate;
+	int ret = 0;
+
+	/* Make sure power on */
+	ov7670_power_down(0);
+
+	switch (a->type) {
+	/* This is the only case currently handled. */
+	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
+		/* Check that the new frame rate is allowed. */
+		if ((timeperframe->numerator == 0) ||
+		    (timeperframe->denominator == 0)) {
+			timeperframe->denominator = DEFAULT_FPS;
+			timeperframe->numerator = 1;
+		}
+
+		tgt_fps = timeperframe->denominator /
+			  timeperframe->numerator;
+
+		if (tgt_fps > MAX_FPS) {
+			timeperframe->denominator = MAX_FPS;
+			timeperframe->numerator = 1;
+		} else if (tgt_fps < MIN_FPS) {
+			timeperframe->denominator = MIN_FPS;
+			timeperframe->numerator = 1;
+		}
+
+		/* Actual frame rate we use */
+		tgt_fps = timeperframe->denominator /
+			  timeperframe->numerator;
+
+		if (tgt_fps == 15)
+			frame_rate = ov7670_15_fps;
+		else if (tgt_fps == 30)
+			frame_rate = ov7670_30_fps;
+		else {
+			pr_err(" The camera frame rate is not supported!\n");
+			return -EINVAL;
+		}
+
+		ret = ov7670_change_mode(frame_rate,
+				a->parm.capture.capturemode);
+		if (ret < 0)
+			return ret;
+
+		sensor->streamcap.timeperframe = *timeperframe;
+		sensor->streamcap.capturemode = a->parm.capture.capturemode;
+
+		break;
+
+	/* These are all the possible cases. */
+	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
+	case V4L2_BUF_TYPE_VIDEO_OVERLAY:
+	case V4L2_BUF_TYPE_VBI_CAPTURE:
+	case V4L2_BUF_TYPE_VBI_OUTPUT:
+	case V4L2_BUF_TYPE_SLICED_VBI_CAPTURE:
+	case V4L2_BUF_TYPE_SLICED_VBI_OUTPUT:
+		pr_debug("   type is not " \
+			"V4L2_BUF_TYPE_VIDEO_CAPTURE but %d\n",
+			a->type);
+		ret = -EINVAL;
+		break;
+
+	default:
+		pr_debug("   type is unknown - %d\n", a->type);
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+/*!
+ * ioctl_g_fmt_cap - V4L2 sensor interface handler for ioctl_g_fmt_cap
+ * @s: pointer to standard V4L2 device structure
+ * @f: pointer to standard V4L2 v4l2_format structure
+ *
+ * Returns the sensor's current pixel format in the v4l2_format
+ * parameter.
+ */
+static int ioctl_g_fmt_cap(struct v4l2_int_device *s, struct v4l2_format *f)
+{
+	struct sensor_data *sensor = s->priv;
+
+	f->fmt.pix = sensor->pix;
+
+	return 0;
+}
+
+/*!
+ * ioctl_g_ctrl - V4L2 sensor interface handler for VIDIOC_G_CTRL ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @vc: standard V4L2 VIDIOC_G_CTRL ioctl structure
+ *
+ * If the requested control is supported, returns the control's current
+ * value from the video_control[] array.  Otherwise, returns -EINVAL
+ * if the control is not supported.
+ */
+static int ioctl_g_ctrl(struct v4l2_int_device *s, struct v4l2_control *vc)
+{
+	int ret = 0;
+
+	switch (vc->id) {
+	case V4L2_CID_BRIGHTNESS:
+		vc->value = ov7670_data.brightness;
+		break;
+	case V4L2_CID_HUE:
+		vc->value = ov7670_data.hue;
+		break;
+	case V4L2_CID_CONTRAST:
+		vc->value = ov7670_data.contrast;
+		break;
+	case V4L2_CID_SATURATION:
+		vc->value = ov7670_data.saturation;
+		break;
+	case V4L2_CID_RED_BALANCE:
+		vc->value = ov7670_data.red;
+		break;
+	case V4L2_CID_BLUE_BALANCE:
+		vc->value = ov7670_data.blue;
+		break;
+	case V4L2_CID_EXPOSURE:
+		vc->value = ov7670_data.ae_mode;
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+/*!
+ * ioctl_s_ctrl - V4L2 sensor interface handler for VIDIOC_S_CTRL ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @vc: standard V4L2 VIDIOC_S_CTRL ioctl structure
+ *
+ * If the requested control is supported, sets the control's current
+ * value in HW (and updates the video_control[] array).  Otherwise,
+ * returns -EINVAL if the control is not supported.
+ */
+static int ioctl_s_ctrl(struct v4l2_int_device *s, struct v4l2_control *vc)
+{
+	int retval = 0;
+
+	pr_debug("In ov7670:ioctl_s_ctrl %d\n",
+		 vc->id);
+
+	switch (vc->id) {
+	case V4L2_CID_BRIGHTNESS:
+		break;
+	case V4L2_CID_CONTRAST:
+		break;
+	case V4L2_CID_SATURATION:
+		break;
+	case V4L2_CID_HUE:
+		break;
+	case V4L2_CID_AUTO_WHITE_BALANCE:
+		break;
+	case V4L2_CID_DO_WHITE_BALANCE:
+		break;
+	case V4L2_CID_RED_BALANCE:
+		break;
+	case V4L2_CID_BLUE_BALANCE:
+		break;
+	case V4L2_CID_GAMMA:
+		break;
+	case V4L2_CID_EXPOSURE:
+		break;
+	case V4L2_CID_AUTOGAIN:
+		break;
+	case V4L2_CID_GAIN:
+		break;
+	case V4L2_CID_HFLIP:
+		break;
+	case V4L2_CID_VFLIP:
+		break;
+	default:
+		retval = -EPERM;
+		break;
+	}
+
+	return retval;
+}
+
+/*!
+ * ioctl_enum_framesizes - V4L2 sensor interface handler for
+ *			   VIDIOC_ENUM_FRAMESIZES ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @fsize: standard V4L2 VIDIOC_ENUM_FRAMESIZES ioctl structure
+ *
+ * Return 0 if successful, otherwise -EINVAL.
+ */
+static int ioctl_enum_framesizes(struct v4l2_int_device *s,
+				 struct v4l2_frmsizeenum *fsize)
+{
+	if (fsize->index > ov7670_mode_MAX)
+		return -EINVAL;
+
+	fsize->pixel_format = ov7670_data.pix.pixelformat;
+	fsize->discrete.width =
+			max(ov7670_mode_info_data[0][fsize->index].width,
+			    ov7670_mode_info_data[1][fsize->index].width);
+	fsize->discrete.height =
+			max(ov7670_mode_info_data[0][fsize->index].height,
+			    ov7670_mode_info_data[1][fsize->index].height);
+	return 0;
+}
+
+/*!
+ * ioctl_enum_frameintervals - V4L2 sensor interface handler for
+ *			       VIDIOC_ENUM_FRAMEINTERVALS ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @fival: standard V4L2 VIDIOC_ENUM_FRAMEINTERVALS ioctl structure
+ *
+ * Return 0 if successful, otherwise -EINVAL.
+ */
+static int ioctl_enum_frameintervals(struct v4l2_int_device *s,
+					 struct v4l2_frmivalenum *fival)
+{
+	int i, j, count;
+
+	if (fival->index < 0 || fival->index > ov7670_mode_MAX)
+		return -EINVAL;
+
+	if (fival->width == 0 || fival->height == 0 ||
+	    fival->pixel_format == 0) {
+		pr_warning("Please assign pixelformat, width and height.\n");
+		return -EINVAL;
+	}
+
+	fival->type = V4L2_FRMIVAL_TYPE_DISCRETE;
+	fival->discrete.numerator = 1;
+
+	count = 0;
+	for (i = 0; i < ARRAY_SIZE(ov7670_mode_info_data); i++) {
+		for (j = 0; j < (ov7670_mode_MAX + 1); j++) {
+			if (fival->pixel_format == ov7670_data.pix.pixelformat
+			 && fival->width == ov7670_mode_info_data[i][j].width
+			 && fival->height == ov7670_mode_info_data[i][j].height
+			 && ov7670_mode_info_data[i][j].init_data_ptr != NULL) {
+				count++;
+			}
+			if (fival->index == (count - 1)) {
+				fival->discrete.denominator =
+						ov7670_framerates[i];
+				return 0;
+			}
+		}
+	}
+
+	return -EINVAL;
+}
+
+/*!
+ * ioctl_g_chip_ident - V4L2 sensor interface handler for
+ *			VIDIOC_DBG_G_CHIP_IDENT ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @id: pointer to int
+ *
+ * Return 0.
+ */
+static int ioctl_g_chip_ident(struct v4l2_int_device *s, int *id)
+{
+	((struct v4l2_dbg_chip_ident *)id)->match.type =
+					V4L2_CHIP_MATCH_I2C_DRIVER;
+	strcpy(((struct v4l2_dbg_chip_ident *)id)->match.name, "ov7670_camera");
+
+	return 0;
+}
+
+/*!
+ * ioctl_init - V4L2 sensor interface handler for VIDIOC_INT_INIT
+ * @s: pointer to standard V4L2 device structure
+ */
+static int ioctl_init(struct v4l2_int_device *s)
+{
+
+	return 0;
+}
+
+/*!
+ * ioctl_enum_fmt_cap - V4L2 sensor interface handler for VIDIOC_ENUM_FMT
+ * @s: pointer to standard V4L2 device structure
+ * @fmt: pointer to standard V4L2 fmt description structure
+ *
+ * Return 0.
+ */
+static int ioctl_enum_fmt_cap(struct v4l2_int_device *s,
+			      struct v4l2_fmtdesc *fmt)
+{
+	if (fmt->index > ov7670_mode_MAX)
+		return -EINVAL;
+
+	fmt->pixelformat = ov7670_data.pix.pixelformat;
+
+	return 0;
+}
+
+/*!
+ * ioctl_dev_init - V4L2 sensor interface handler for vidioc_int_dev_init_num
+ * @s: pointer to standard V4L2 device structure
+ *
+ * Initialise the device when slave attaches to the master.
+ */
+static int ioctl_dev_init(struct v4l2_int_device *s)
+{
+	struct sensor_data *sensor = s->priv;
+	u32 tgt_xclk;	/* target xclk */
+	u32 tgt_fps;	/* target frames per secound */
+	enum ov7670_frame_rate frame_rate;
+	int ret;
+
+	pr_debug("ioctl_dev_init\n");
+	
+	ov7670_data.on = true;
+
+	/* mclk */
+	tgt_xclk = ov7670_data.mclk;
+	tgt_xclk = min(tgt_xclk, (u32)OV7670_XCLK_MAX);
+	tgt_xclk = max(tgt_xclk, (u32)OV7670_XCLK_MIN);
+	ov7670_data.mclk = tgt_xclk;
+
+	pr_debug("   Setting mclk to %d MHz\n", tgt_xclk / 1000000);
+	clk_set_rate(ov7670_data.sensor_clk, ov7670_data.mclk);
+
+	/* Default camera frame rate is set in probe */
+	tgt_fps = sensor->streamcap.timeperframe.denominator /
+		  sensor->streamcap.timeperframe.numerator;
+
+	if (tgt_fps == 15)
+		frame_rate = ov7670_15_fps;
+	else if (tgt_fps == 30)
+		frame_rate = ov7670_30_fps;
+	else
+		return -EINVAL; /* Only support 15fps or 30fps now. */
+
+	ret = ov7670_init_mode();
+	return ret;
+}
+
+/*!
+ * ioctl_dev_exit - V4L2 sensor interface handler for vidioc_int_dev_exit_num
+ * @s: pointer to standard V4L2 device structure
+ *
+ * Delinitialise the device when slave detaches to the master.
+ */
+static int ioctl_dev_exit(struct v4l2_int_device *s)
+{
+	return 0;
+}
+
+/*!
+ * This structure defines all the ioctls for this module and links them to the
+ * enumeration.
+ */
+static struct v4l2_int_ioctl_desc ov7670_ioctl_desc[] = {
+	{ vidioc_int_dev_init_num,
+	  (v4l2_int_ioctl_func *)ioctl_dev_init },
+	{ vidioc_int_dev_exit_num,
+	  ioctl_dev_exit},
+	{ vidioc_int_s_power_num,
+	  (v4l2_int_ioctl_func *)ioctl_s_power },
+	{ vidioc_int_g_ifparm_num,
+	  (v4l2_int_ioctl_func *)ioctl_g_ifparm },
+	{ vidioc_int_init_num,
+	  (v4l2_int_ioctl_func *)ioctl_init },
+	{ vidioc_int_enum_fmt_cap_num,
+	  (v4l2_int_ioctl_func *)ioctl_enum_fmt_cap },
+	{ vidioc_int_g_fmt_cap_num,
+	  (v4l2_int_ioctl_func *)ioctl_g_fmt_cap },
+	{ vidioc_int_g_parm_num,
+	  (v4l2_int_ioctl_func *)ioctl_g_parm },
+	{ vidioc_int_s_parm_num,
+	  (v4l2_int_ioctl_func *)ioctl_s_parm },
+	{ vidioc_int_g_ctrl_num,
+	  (v4l2_int_ioctl_func *)ioctl_g_ctrl },
+	{ vidioc_int_s_ctrl_num,
+	  (v4l2_int_ioctl_func *)ioctl_s_ctrl },
+	{ vidioc_int_enum_framesizes_num,
+	  (v4l2_int_ioctl_func *)ioctl_enum_framesizes },
+	{ vidioc_int_enum_frameintervals_num,
+	  (v4l2_int_ioctl_func *)ioctl_enum_frameintervals },
+	{ vidioc_int_g_chip_ident_num,
+	  (v4l2_int_ioctl_func *)ioctl_g_chip_ident },
+};
+
+static struct v4l2_int_slave ov7670_slave = {
+	.ioctls = ov7670_ioctl_desc,
+	.num_ioctls = ARRAY_SIZE(ov7670_ioctl_desc),
+};
+
+static struct v4l2_int_device ov7670_int_device = {
+	.module = THIS_MODULE,
+	.name = "ov767x",
+	.type = v4l2_int_type_slave,
+	.u = {
+		.slave = &ov7670_slave,
+	},
+};
+
+/*!
+ * ov7670 I2C probe function
+ *
+ * @param adapter            struct i2c_adapter *
+ * @return  Error code indicating success or failure
+ */
+static int ov7670_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct pinctrl *pinctrl;
+	struct device *dev = &client->dev;
+	int retval;
+	u8 chip_id_high, chip_id_low;
+
+	pr_debug("ov7670_probe\n");
+	
+	/* ov7670 pinctrl */
+	pinctrl = devm_pinctrl_get_select_default(dev);
+	if (IS_ERR(pinctrl)) {
+		dev_err(dev, "setup pinctrl failed\n");
+		return PTR_ERR(pinctrl);
+	}
+
+#if 0
+	// ON FSL Board this pin is from 74hc595,
+	// ON ITL Board is G14 GPIO1_IO27
+	/* request power down pin */
+	pwn_gpio = of_get_named_gpio(dev->of_node, "pwn-gpios", 0);
+	if (!gpio_is_valid(pwn_gpio)) {
+		dev_err(dev, "no sensor pwdn pin available\n");
+		return -ENODEV;
+	}
+	retval = devm_gpio_request_one(dev, pwn_gpio, GPIOF_OUT_INIT_HIGH,
+					"ov7670_pwdn");
+	if (retval < 0)
+		return retval;
+#endif
+
+#if 0
+	// ON FSL Board this pin is from 74hc595
+	// No Reset on ITL
+	/* request reset pin */
+	rst_gpio = of_get_named_gpio(dev->of_node, "rst-gpios", 0);
+	if (!gpio_is_valid(rst_gpio)) {
+		dev_err(dev, "no sensor reset pin available\n");
+		return -EINVAL;
+	}
+	retval = devm_gpio_request_one(dev, rst_gpio, GPIOF_OUT_INIT_HIGH,
+					"ov7670_reset");
+	if (retval < 0)
+		return retval;
+#endif
+
+	/* Set initial values for the sensor struct. */
+	memset(&ov7670_data, 0, sizeof(ov7670_data));
+	ov7670_data.sensor_clk = devm_clk_get(dev, "csi_mclk");
+	if (IS_ERR(ov7670_data.sensor_clk)) {
+		dev_err(dev, "get mclk failed\n");
+		return PTR_ERR(ov7670_data.sensor_clk);
+	}
+
+	retval = of_property_read_u32(dev->of_node, "mclk",
+					&ov7670_data.mclk);
+	if (retval) {
+		dev_err(dev, "mclk frequency is invalid\n");
+		return retval;
+	}
+
+	retval = of_property_read_u32(dev->of_node, "mclk_source",
+					(u32 *) &(ov7670_data.mclk_source));
+	if (retval) {
+		dev_err(dev, "mclk_source invalid\n");
+		return retval;
+	}
+
+	retval = of_property_read_u32(dev->of_node, "csi_id",
+					&(ov7670_data.csi));
+	if (retval) {
+		dev_err(dev, "csi_id invalid\n");
+		return retval;
+	}
+
+	clk_prepare_enable(ov7670_data.sensor_clk);
+
+	ov7670_data.io_init = ov7670_reset;
+	ov7670_data.i2c_client = client;
+	ov7670_data.pix.pixelformat = V4L2_PIX_FMT_YUYV;
+	ov7670_data.pix.width = 640;
+	ov7670_data.pix.height = 480;
+	ov7670_data.streamcap.capability = V4L2_MODE_HIGHQUALITY |
+					   V4L2_CAP_TIMEPERFRAME;
+	ov7670_data.streamcap.capturemode = 0;
+	ov7670_data.streamcap.timeperframe.denominator = DEFAULT_FPS;
+	ov7670_data.streamcap.timeperframe.numerator = 1;
+
+	ov7670_regulator_enable(&client->dev);
+
+	ov7670_reset();
+
+	ov7670_power_down(0);
+
+	retval = ov7670_read_reg(REG_PID, &chip_id_high);
+	if (retval < 0 || chip_id_high != 0x76) {
+		clk_disable_unprepare(ov7670_data.sensor_clk);
+		pr_warning("camera ov7670 is not found\n");
+		return -ENODEV;
+	}
+	retval = ov7670_read_reg(REG_VER, &chip_id_low);
+	if (retval < 0 || chip_id_low != 0x73) {
+		clk_disable_unprepare(ov7670_data.sensor_clk);
+		pr_warning("camera ov7670 is not found\n");
+		return -ENODEV;
+	}
+
+	ov7670_power_down(1);
+
+	clk_disable_unprepare(ov7670_data.sensor_clk);
+
+	ov7670_int_device.priv = &ov7670_data;
+	retval = v4l2_int_device_register(&ov7670_int_device);
+
+	pr_info("camera ov7670 is found\n");
+	return retval;
+}
+
+/*!
+ * ov7670 I2C detach function
+ *
+ * @param client            struct i2c_client *
+ * @return  Error code indicating success or failure
+ */
+static int ov7670_remove(struct i2c_client *client)
+{
+	v4l2_int_device_unregister(&ov7670_int_device);
+
+	if (analog_regulator)
+		regulator_disable(analog_regulator);
+
+	if (core_regulator)
+		regulator_disable(core_regulator);
+
+	if (io_regulator)
+		regulator_disable(io_regulator);
+
+	return 0;
+}
+
+module_i2c_driver(ov7670_i2c_driver);
+
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_DESCRIPTION("OV5640 Camera Driver");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0");
+MODULE_ALIAS("CSI");
diff --git a/drivers/media/platform/mxc/subdev/ov7670.c b/drivers/media/platform/mxc/subdev/ov7670.c
new file mode 100644
index 0000000..9ff7ae9
--- /dev/null
+++ b/drivers/media/platform/mxc/subdev/ov7670.c
@@ -0,0 +1,1757 @@
+/*
+ * Copyright (C) 2012-2015 Freescale Semiconductor, Inc. All Rights Reserved.
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/regulator/consumer.h>
+#include <linux/v4l2-mediabus.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-ctrls.h>
+
+#define MIN_FPS 15
+#define MAX_FPS 30
+#define DEFAULT_FPS 30
+
+#define OV7670_XCLK_MIN 6000000
+#define OV7670_XCLK_MAX 24000000
+
+/* Registers */
+#define REG_GAIN	0x00	/* Gain lower 8 bits (rest in vref) */
+#define REG_BLUE	0x01	/* blue gain */
+#define REG_RED		0x02	/* red gain */
+#define REG_VREF	0x03	/* Pieces of GAIN, VSTART, VSTOP */
+#define REG_COM1	0x04	/* Control 1 */
+#define  COM1_CCIR656	  0x40  /* CCIR656 enable */
+#define REG_BAVE	0x05	/* U/B Average level */
+#define REG_GbAVE	0x06	/* Y/Gb Average level */
+#define REG_AECHH	0x07	/* AEC MS 5 bits */
+#define REG_RAVE	0x08	/* V/R Average level */
+#define REG_COM2	0x09	/* Control 2 */
+#define  COM2_SSLEEP	  0x10	/* Soft sleep mode */
+#define REG_PID		0x0a	/* Product ID MSB */
+#define REG_VER		0x0b	/* Product ID LSB */
+#define REG_COM3	0x0c	/* Control 3 */
+#define  COM3_SWAP	  0x40	  /* Byte swap */
+#define  COM3_SCALEEN	  0x08	  /* Enable scaling */
+#define  COM3_DCWEN	  0x04	  /* Enable downsamp/crop/window */
+#define REG_COM4	0x0d	/* Control 4 */
+#define REG_COM5	0x0e	/* All "reserved" */
+#define REG_COM6	0x0f	/* Control 6 */
+#define REG_AECH	0x10	/* More bits of AEC value */
+#define REG_CLKRC	0x11	/* Clocl control */
+#define   CLK_EXT	  0x40	  /* Use external clock directly */
+#define   CLK_SCALE	  0x3f	  /* Mask for internal clock scale */
+#define REG_COM7	0x12	/* Control 7 */
+#define   COM7_RESET	  0x80	  /* Register reset */
+#define   COM7_FMT_MASK	  0x38
+#define   COM7_FMT_VGA	  0x00
+#define	  COM7_FMT_CIF	  0x20	  /* CIF format */
+#define   COM7_FMT_QVGA	  0x10	  /* QVGA format */
+#define   COM7_FMT_QCIF	  0x08	  /* QCIF format */
+#define	  COM7_RGB	  0x04	  /* bits 0 and 2 - RGB format */
+#define	  COM7_YUV	  0x00	  /* YUV */
+#define	  COM7_BAYER	  0x01	  /* Bayer format */
+#define	  COM7_PBAYER	  0x05	  /* "Processed bayer" */
+#define REG_COM8	0x13	/* Control 8 */
+#define   COM8_FASTAEC	  0x80	  /* Enable fast AGC/AEC */
+#define   COM8_AECSTEP	  0x40	  /* Unlimited AEC step size */
+#define   COM8_BFILT	  0x20	  /* Band filter enable */
+#define   COM8_AGC	  0x04	  /* Auto gain enable */
+#define   COM8_AWB	  0x02	  /* White balance enable */
+#define   COM8_AEC	  0x01	  /* Auto exposure enable */
+#define REG_COM9	0x14	/* Control 9  - gain ceiling */
+#define REG_COM10	0x15	/* Control 10 */
+#define   COM10_HSYNC	  0x40	  /* HSYNC instead of HREF */
+#define   COM10_PCLK_HB	  0x20	  /* Suppress PCLK on horiz blank */
+#define   COM10_HREF_REV  0x08	  /* Reverse HREF */
+#define   COM10_VS_LEAD	  0x04	  /* VSYNC on clock leading edge */
+#define   COM10_VS_NEG	  0x02	  /* VSYNC negative */
+#define   COM10_HS_NEG	  0x01	  /* HSYNC negative */
+#define REG_HSTART	0x17	/* Horiz start high bits */
+#define REG_HSTOP	0x18	/* Horiz stop high bits */
+#define REG_VSTART	0x19	/* Vert start high bits */
+#define REG_VSTOP	0x1a	/* Vert stop high bits */
+#define REG_PSHFT	0x1b	/* Pixel delay after HREF */
+#define REG_MIDH	0x1c	/* Manuf. ID high */
+#define REG_MIDL	0x1d	/* Manuf. ID low */
+#define REG_MVFP	0x1e	/* Mirror / vflip */
+#define   MVFP_MIRROR	  0x20	  /* Mirror image */
+#define   MVFP_FLIP	  0x10	  /* Vertical flip */
+
+#define REG_AEW		0x24	/* AGC upper limit */
+#define REG_AEB		0x25	/* AGC lower limit */
+#define REG_VPT		0x26	/* AGC/AEC fast mode op region */
+#define REG_HSYST	0x30	/* HSYNC rising edge delay */
+#define REG_HSYEN	0x31	/* HSYNC falling edge delay */
+#define REG_HREF	0x32	/* HREF pieces */
+#define REG_TSLB	0x3a	/* lots of stuff */
+#define   TSLB_YLAST	  0x04	  /* UYVY or VYUY - see com13 */
+#define REG_COM11	0x3b	/* Control 11 */
+#define   COM11_NIGHT	  0x80	  /* NIght mode enable */
+#define   COM11_NMFR	  0x60	  /* Two bit NM frame rate */
+#define   COM11_HZAUTO	  0x10	  /* Auto detect 50/60 Hz */
+#define	  COM11_50HZ	  0x08	  /* Manual 50Hz select */
+#define   COM11_EXP	  0x02
+#define REG_COM12	0x3c	/* Control 12 */
+#define   COM12_HREF	  0x80	  /* HREF always */
+#define REG_COM13	0x3d	/* Control 13 */
+#define   COM13_GAMMA	  0x80	  /* Gamma enable */
+#define	  COM13_UVSAT	  0x40	  /* UV saturation auto adjustment */
+#define   COM13_UVSWAP	  0x01	  /* V before U - w/TSLB */
+#define REG_COM14	0x3e	/* Control 14 */
+#define   COM14_DCWEN	  0x10	  /* DCW/PCLK-scale enable */
+#define REG_EDGE	0x3f	/* Edge enhancement factor */
+#define REG_COM15	0x40	/* Control 15 */
+#define   COM15_R10F0	  0x00	  /* Data range 10 to F0 */
+#define	  COM15_R01FE	  0x80	  /*            01 to FE */
+#define   COM15_R00FF	  0xc0	  /*            00 to FF */
+#define   COM15_RGB565	  0x10	  /* RGB565 output */
+#define   COM15_RGB555	  0x30	  /* RGB555 output */
+#define REG_COM16	0x41	/* Control 16 */
+#define   COM16_AWBGAIN   0x08	  /* AWB gain enable */
+#define REG_COM17	0x42	/* Control 17 */
+#define   COM17_AECWIN	  0xc0	  /* AEC window - must match COM4 */
+#define   COM17_CBAR	  0x08	  /* DSP Color bar */
+
+/*
+ * This matrix defines how the colors are generated, must be
+ * tweaked to adjust hue and saturation.
+ *
+ * Order: v-red, v-green, v-blue, u-red, u-green, u-blue
+ *
+ * They are nine-bit signed quantities, with the sign bit
+ * stored in 0x58.  Sign for v-red is bit 0, and up from there.
+ */
+#define	REG_CMATRIX_BASE 0x4f
+#define	CMATRIX_LEN 6
+#define	REG_CMATRIX_SIGN 0x58
+
+#define	REG_BRIGHT	0x55	/* Brightness */
+#define	REG_CONTRAS	0x56	/* Contrast control */
+
+#define	REG_GFIX	0x69	/* Fix gain control */
+
+#define	REG_DBLV	0x6b	/* PLL control an debugging */
+#define	DBLV_BYPASS	  0x00	  /* Bypass PLL */
+#define	DBLV_X4	  0x01	  /* clock x4 */
+#define	DBLV_X6	  0x10	  /* clock x6 */
+#define	DBLV_X8	  0x11	  /* clock x8 */
+
+#define	REG_REG76	0x76	/* OV's name */
+#define	R76_BLKPCOR	  0x80	  /* Black pixel correction enable */
+#define	R76_WHTPCOR	  0x40	  /* White pixel correction enable */
+
+#define	REG_RGB444	0x8c	/* RGB 444 control */
+#define	R444_ENABLE	  0x02	  /* Turn on RGB444, overrides 5x5 */
+#define	R444_RGBX	  0x01	  /* Empty nibble at end */
+
+#define	REG_HAECC1	0x9f	/* Hist AEC/AGC control 1 */
+#define	REG_HAECC2	0xa0	/* Hist AEC/AGC control 2 */
+
+#define	REG_BD50MAX	0xa5	/* 50hz banding step limit */
+#define	REG_HAECC3	0xa6	/* Hist AEC/AGC control 3 */
+#define	REG_HAECC4	0xa7	/* Hist AEC/AGC control 4 */
+#define	REG_HAECC5	0xa8	/* Hist AEC/AGC control 5 */
+#define	REG_HAECC6	0xa9	/* Hist AEC/AGC control 6 */
+#define	REG_HAECC7	0xaa	/* Hist AEC/AGC control 7 */
+#define	REG_BD60MAX	0xab	/* 60hz banding step limit */
+
+
+enum ov7670_model {
+	MODEL_OV7670 = 0,
+	MODEL_OV7675,
+};
+
+enum ov7670_mode {
+	ov7670_modeMIN = 0,
+	ov7670_modeVGA_640_480 = 0,
+	ov7670_modeQVGA_320_240 = 1,
+	ov7670_modeMAX = 2
+};
+
+enum ov7670_frame_rate {
+	ov7670_15_fps,
+	ov7670_30_fps
+};
+
+static int ov7670_framerates[] = {
+	[ov7670_15_fps] = 15,
+	[ov7670_30_fps] = 30,
+};
+
+struct ov7670_datafmt {
+	enum v4l2_mbus_pixelcode	code;
+	enum v4l2_colorspace		colorspace;
+};
+
+struct reg_value {
+	u16 u16RegAddr;
+	u8 u8Val;
+	u8 u8Mask;
+	u32 u32Delay_ms;
+};
+
+struct ov7670_modeinfo {
+	enum ov7670_mode mode;
+	u32 width;
+	u32 height;
+	struct reg_value *init_data_ptr;
+	u32 init_data_size;
+};
+
+struct ov7670 {
+	struct v4l2_subdev		subdev;
+	struct i2c_client *i2c_client;
+	struct v4l2_pix_format pix;
+	const struct ov7670_datafmt	*fmt;
+	struct v4l2_captureparm streamcap;
+	bool on;
+
+	/* control settings */
+	int brightness;
+	int hue;
+	int contrast;
+	int saturation;
+	int red;
+	int green;
+	int blue;
+	int ae_mode;
+
+	u32 mclk;
+	u8 mclk_source;
+	struct clk *sensor_clk;
+	int csi;
+
+	void (*io_init)(void);
+};
+
+/*!
+ * Maintains the information on the current state of the sesor.
+ */
+static struct ov7670 ov7670_data;
+static int pwn_gpio;
+//static int rst_gpio;
+//static int prev_sysclk;
+//static int AE_Target = 52, night_mode;
+//static int prev_HTS;
+//static int AE_high, AE_low;
+
+/* OV7675 Register dump from Omnivision Panther Tool */
+static struct reg_value ov7670_global_init_setting[] = {
+	{ 0x00, 0x05, 0, 0 }, { 0x00, 0x78, 0, 0 }, { 0x00, 0x48, 0, 0 },
+	{ 0x00, 0x0a, 0, 0 }, { 0x00, 0x03, 0, 0 }, { 0x05, 0x6e, 0, 0 },
+	{ 0x06, 0x56, 0, 0 }, { 0x07, 0x00, 0, 0 }, { 0x08, 0x6e, 0, 0 },
+	{ 0x09, 0x00, 0, 0 }, { 0x0a, 0x76, 0, 0 },	{ 0x0b, 0x73, 0, 0 },
+	{ 0x0c, 0x00, 0, 0 }, { 0x0d, 0x40, 0, 0 },	{ 0x0e, 0x61, 0, 0 },
+	{ 0x0f, 0x4b, 0, 0 }, { 0x10, 0x72, 0, 0 },	{ 0x11, 0x80, 0, 0 },
+	{ 0x12, 0x00, 0, 0 }, { 0x13, 0xe7, 0, 0 },	{ 0x14, 0x28, 0, 0 },
+	{ 0x15, 0x00, 0, 0 }, { 0x16, 0x02, 0, 0 }, { 0x17, 0x13, 0, 0 },
+	{ 0x18, 0x01, 0, 0 }, { 0x19, 0x03, 0, 0 },	{ 0x1a, 0x7b, 0, 0 },
+	{ 0x1b, 0x08, 0, 0 }, { 0x1c, 0x7f, 0, 0 },	{ 0x1d, 0xa2, 0, 0 },
+	{ 0x1e, 0x37, 0, 0 }, { 0x1f, 0x00, 0, 0 },	{ 0x20, 0x00, 0, 0 },
+	{ 0x21, 0x00, 0, 0 }, { 0x22, 0x00, 0, 0 },	{ 0x23, 0x00, 0, 0 },
+	{ 0x24, 0x40, 0, 0 }, { 0x25, 0x38, 0, 0 },	{ 0x26, 0x91, 0, 0 },
+	{ 0x27, 0x80, 0, 0 }, { 0x28, 0x80, 0, 0 },	{ 0x29, 0x07, 0, 0 },
+	{ 0x2a, 0x00, 0, 0 }, { 0x2b, 0x00, 0, 0 }, { 0x2c, 0x80, 0, 0 },
+	{ 0x2d, 0x00, 0, 0 }, { 0x2e, 0x00, 0, 0 },	{ 0x2f, 0x3d, 0, 0 },
+	{ 0x30, 0x0b, 0, 0 }, { 0x31, 0x30, 0, 0 }, { 0x32, 0xbf, 0, 0 },
+	{ 0x33, 0xbf, 0, 0 }, { 0x34, 0xbf, 0, 0 }, { 0x35, 0xbf, 0, 0 },
+	{ 0x36, 0x00, 0, 0 }, { 0x37, 0x00, 0, 0 }, { 0x38, 0x00, 0, 0 },
+	{ 0x39, 0x2a, 0, 0 }, { 0x3a, 0x04, 0, 0 }, { 0x3b, 0x12, 0, 0 },
+	{ 0x3c, 0x78, 0, 0 }, { 0x3d, 0xc3, 0, 0 }, { 0x3e, 0x00, 0, 0 },
+	{ 0x3f, 0x03, 0, 0 }, { 0x40, 0xc0, 0, 0 }, { 0x41, 0x38, 0, 0 },
+	{ 0x42, 0x00, 0, 0 }, { 0x43, 0x0a, 0, 0 }, { 0x44, 0xf2, 0, 0 },
+	{ 0x45, 0x39, 0, 0 }, { 0x46, 0x62, 0, 0 }, { 0x47, 0x3d, 0, 0 },
+	{ 0x48, 0x55, 0, 0 }, { 0x49, 0x00, 0, 0 }, { 0x4a, 0x00, 0, 0 },
+	{ 0x4b, 0x09, 0, 0 }, { 0x4c, 0x03, 0, 0 }, { 0x4d, 0x40, 0, 0 },
+	{ 0x4e, 0x20, 0, 0 }, { 0x4f, 0x87, 0, 0 }, { 0x50, 0x68, 0, 0 },
+	{ 0x51, 0x1e, 0, 0 }, { 0x52, 0x15, 0, 0 }, { 0x53, 0x7c, 0, 0 },
+	{ 0x54, 0x91, 0, 0 }, { 0x55, 0x00, 0, 0 }, { 0x56, 0x40, 0, 0 },
+	{ 0x57, 0x80, 0, 0 }, { 0x58, 0x1e, 0, 0 }, { 0x59, 0x83, 0, 0 },
+	{ 0x5a, 0x0d, 0, 0 }, { 0x5b, 0xcd, 0, 0 }, { 0x5c, 0x8c, 0, 0 },
+	{ 0x5d, 0x77, 0, 0 }, { 0x5e, 0x16, 0, 0 }, { 0x5f, 0xf0, 0, 0 },
+	{ 0x60, 0xf0, 0, 0 }, { 0x61, 0xf0, 0, 0 }, { 0x62, 0x10, 0, 0 },
+	{ 0x63, 0x0b, 0, 0 }, { 0x64, 0x0f, 0, 0 }, { 0x65, 0x07, 0, 0 },
+	{ 0x66, 0x05, 0, 0 }, { 0x67, 0x80, 0, 0 },	{ 0x68, 0x80, 0, 0 },
+	{ 0x69, 0x00, 0, 0 }, { 0x6a, 0x40, 0, 0 }, { 0x6b, 0x0a, 0, 0 },
+	{ 0x6c, 0x0a, 0, 0 }, { 0x6d, 0x65, 0, 0 }, { 0x6e, 0x11, 0, 0 },
+	{ 0x6f, 0x9e, 0, 0 }, { 0x70, 0x3a, 0, 0 }, { 0x71, 0x35, 0, 0 },
+	{ 0x72, 0x11, 0, 0 }, { 0x73, 0xf0, 0, 0 }, { 0x74, 0x10, 0, 0 },
+	{ 0x75, 0x04, 0, 0 }, { 0x76, 0xe0, 0, 0 }, { 0x77, 0x01, 0, 0 },
+	{ 0x78, 0x04, 0, 0 }, { 0x79, 0x26, 0, 0 }, { 0x7a, 0x09, 0, 0 },
+	{ 0x7b, 0x0c, 0, 0 }, { 0x7c, 0x16, 0, 0 }, { 0x7d, 0x28, 0, 0 },
+	{ 0x7e, 0x48, 0, 0 }, { 0x7f, 0x57, 0, 0 }, { 0x80, 0x64, 0, 0 },
+	{ 0x81, 0x71, 0, 0 }, { 0x82, 0x7e, 0, 0 }, { 0x83, 0x89, 0, 0 },
+	{ 0x84, 0x94, 0, 0 }, { 0x85, 0xa8, 0, 0 }, { 0x86, 0xba, 0, 0 },
+	{ 0x87, 0xd7, 0, 0 }, { 0x88, 0xec, 0, 0 }, { 0x89, 0xf9, 0, 0 },
+	{ 0x8a, 0x00, 0, 0 }, { 0x8b, 0x00, 0, 0 }, { 0x8c, 0x00, 0, 0 },
+	{ 0x8d, 0x4f, 0, 0 }, { 0x8e, 0x4f, 0, 0 }, { 0x8f, 0x4f, 0, 0 },
+	{ 0x90, 0x4f, 0, 0 }, { 0x91, 0x4f, 0, 0 }, { 0x92, 0x00, 0, 0 },
+	{ 0x93, 0x00, 0, 0 }, { 0x94, 0x0e, 0, 0 }, { 0x95, 0x10, 0, 0 },
+	{ 0x96, 0x10, 0, 0 }, { 0x97, 0x10, 0, 0 }, { 0x98, 0x10, 0, 0 },
+	{ 0x99, 0x10, 0, 0 }, { 0x9a, 0x10, 0, 0 }, { 0x9b, 0x10, 0, 0 },
+	{ 0x9c, 0x10, 0, 0 }, { 0x9d, 0x99, 0, 0 }, { 0x9e, 0x7f, 0, 0 },
+	{ 0x9f, 0x78, 0, 0 }, { 0xa0, 0x68, 0, 0 }, { 0xa1, 0x03, 0, 0 },
+	{ 0xa2, 0x02, 0, 0 }, { 0xa3, 0x04, 0, 0 }, { 0xa4, 0x88, 0, 0 },
+	{ 0xa5, 0x02, 0, 0 }, { 0xa6, 0x02, 0, 0 }, { 0xa7, 0x02, 0, 0 },
+	{ 0xa8, 0x02, 0, 0 }, { 0xa9, 0x02, 0, 0 }, { 0xaa, 0x02, 0, 0 },
+	{ 0xab, 0x02, 0, 0 }, { 0xac, 0x02, 0, 0 }, { 0xad, 0x00, 0, 0 },
+	{ 0xae, 0x00, 0, 0 }, { 0xaf, 0x00, 0, 0 }, { 0xb0, 0x00, 0, 0 },
+	{ 0xb1, 0x00, 0, 0 }, { 0xb2, 0x00, 0, 0 }, { 0xb3, 0x00, 0, 0 },
+	{ 0xb4, 0x00, 0, 0 }, { 0xb5, 0x00, 0, 0 }, { 0xb6, 0x00, 0, 0 },
+	{ 0xb7, 0x26, 0, 0 }, { 0xb8, 0x0a, 0, 0 }, { 0xb9, 0x00, 0, 0 },
+	{ 0xba, 0x00, 0, 0 }, { 0xbb, 0xa1, 0, 0 }, { 0xbc, 0x12, 0, 0 },
+	{ 0xbd, 0x00, 0, 0 }, { 0xbe, 0x00, 0, 0 }, { 0xbf, 0x00, 0, 0 },
+	{ 0xc0, 0x00, 0, 0 }, { 0xc1, 0x7f, 0, 0 }, { 0xc2, 0xef, 0, 0 },
+	{ 0xc3, 0x11, 0, 0 }, { 0xc4, 0x00, 0, 0 }, { 0xc5, 0x00, 0, 0 },
+	{ 0xc6, 0x00, 0, 0 }, { 0xc7, 0x00, 0, 0 }, { 0xc8, 0x00, 0, 0 },
+	{ 0xc9, 0x38, 0, 0 }, { 0xca, 0x00, 0, 0 }, { 0xcb, 0x20, 0, 0 },
+	{ 0xcc, 0x00, 0, 0 }, { 0xcd, 0x03, 0, 0 }, { 0xce, 0x00, 0, 0 },
+	{ 0xcf, 0x84, 0, 0 }, { 0xd0, 0x32, 0, 0 }, { 0xd1, 0x0c, 0, 0 },
+	{ 0xd2, 0x1c, 0, 0 }, { 0xd3, 0x00, 0, 0 }, { 0xd4, 0x84, 0, 0 },
+	{ 0xd5, 0x00, 0, 0 }, { 0xd6, 0x18, 0, 0 }, { 0xd7, 0x10, 0, 0 },
+	{ 0xd8, 0x00, 0, 0 }, { 0xd9, 0xc2, 0, 0 }, { 0xda, 0x40, 0, 0 },
+	{ 0xdb, 0x84, 0, 0 }, { 0xdc, 0x32, 0, 0 }, { 0xdd, 0x42, 0, 0 },
+	{ 0xde, 0x04, 0, 0 }, { 0xdf, 0x00, 0, 0 }, { 0xe0, 0x00, 0, 0 },
+	{ 0xe1, 0x40, 0, 0 }, { 0xe2, 0x00, 0, 0 }, { 0xe3, 0x00, 0, 0 },
+	{ 0xe4, 0x00, 0, 0 }, { 0xe5, 0xeb, 0, 0 }, { 0xe6, 0x00, 0, 0 },
+	{ 0xe7, 0x0a, 0, 0 }, { 0xe8, 0x15, 0, 0 }, { 0xe9, 0x00, 0, 0 },
+	{ 0xea, 0x10, 0, 0 }, { 0xeb, 0x10, 0, 0 }, { 0xec, 0x10, 0, 0 },
+	{ 0xed, 0x00, 0, 0 }, { 0xee, 0xff, 0, 0 }, { 0xef, 0x0f, 0, 0 },
+	{ 0xf0, 0x00, 0, 0 }, { 0xf1, 0x00, 0, 0 }, { 0xf2, 0x00, 0, 0 },
+	{ 0xf3, 0x01, 0, 0 }, { 0xf4, 0x04, 0, 0 }, { 0xf5, 0x00, 0, 0 },
+	{ 0xf6, 0x21, 0, 0 }, { 0xf7, 0x0c, 0, 0 }, { 0xf8, 0x01, 0, 0 },
+	{ 0xf9, 0x5d, 0, 0 }, { 0xfa, 0x01, 0, 0 }, { 0xfb, 0x5e, 0, 0 },
+	{ 0xfc, 0x01, 0, 0 }, { 0xfd, 0x5d, 0, 0 }, { 0xfe, 0x01, 0, 0 },
+	{ 0xff, 0x5d, 0, 0 }
+};
+
+static struct reg_value ov7670_setting_30fps_VGA_640_480[] = {
+	{0x3c07, 0x08, 0, 0}, {0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0},
+	{0x3814, 0x31, 0, 0}, {0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0},
+	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0},
+	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
+	{0x3807, 0x9b, 0, 0}, {0x3808, 0x02, 0, 0}, {0x3809, 0x80, 0, 0},
+	{0x380a, 0x01, 0, 0}, {0x380b, 0xe0, 0, 0}, {0x380c, 0x07, 0, 0},
+	{0x380d, 0x68, 0, 0}, {0x380e, 0x03, 0, 0}, {0x380f, 0xd8, 0, 0},
+	{0x3813, 0x06, 0, 0}, {0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0},
+	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x0b, 0, 0},
+	{0x3a03, 0x88, 0, 0}, {0x3a14, 0x0b, 0, 0}, {0x3a15, 0x88, 0, 0},
+	{0x4004, 0x02, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
+	{0x4713, 0x03, 0, 0}, {0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0},
+	{0x460c, 0x22, 0, 0}, {0x4837, 0x22, 0, 0}, {0x3824, 0x02, 0, 0},
+	{0x5001, 0xa3, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x11, 0, 0},
+	{0x3036, 0x46, 0, 0}, {0x3037, 0x13, 0, 0}, {0x3503, 0x00, 0, 0},
+};
+
+static struct reg_value ov7670_setting_15fps_VGA_640_480[] = {
+	{0x3c07, 0x08, 0, 0}, {0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0},
+	{0x3814, 0x31, 0, 0}, {0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0},
+	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0},
+	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
+	{0x3807, 0x9b, 0, 0}, {0x3808, 0x02, 0, 0}, {0x3809, 0x80, 0, 0},
+	{0x380a, 0x01, 0, 0}, {0x380b, 0xe0, 0, 0}, {0x380c, 0x07, 0, 0},
+	{0x380d, 0x68, 0, 0}, {0x380e, 0x03, 0, 0}, {0x380f, 0xd8, 0, 0},
+	{0x3813, 0x06, 0, 0}, {0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0},
+	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x0b, 0, 0},
+	{0x3a03, 0x88, 0, 0}, {0x3a14, 0x0b, 0, 0}, {0x3a15, 0x88, 0, 0},
+	{0x4004, 0x02, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
+	{0x4713, 0x03, 0, 0}, {0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0},
+	{0x460c, 0x22, 0, 0}, {0x4837, 0x22, 0, 0}, {0x3824, 0x02, 0, 0},
+	{0x5001, 0xa3, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x21, 0, 0},
+	{0x3036, 0x46, 0, 0}, {0x3037, 0x13, 0, 0}, {0x3503, 0x00, 0, 0},
+};
+
+static struct reg_value ov7670_setting_30fps_QVGA_320_240[] = {
+	{0x3c07, 0x08, 0, 0}, {0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0},
+	{0x3814, 0x31, 0, 0}, {0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0},
+	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0},
+	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
+	{0x3807, 0x9b, 0, 0}, {0x3808, 0x01, 0, 0}, {0x3809, 0x40, 0, 0},
+	{0x380a, 0x00, 0, 0}, {0x380b, 0xf0, 0, 0}, {0x380c, 0x07, 0, 0},
+	{0x380d, 0x68, 0, 0}, {0x380e, 0x03, 0, 0}, {0x380f, 0xd8, 0, 0},
+	{0x3813, 0x06, 0, 0}, {0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0},
+	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x0b, 0, 0},
+	{0x3a03, 0x88, 0, 0}, {0x3a14, 0x0b, 0, 0}, {0x3a15, 0x88, 0, 0},
+	{0x4004, 0x02, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
+	{0x4713, 0x03, 0, 0}, {0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0},
+	{0x460c, 0x22, 0, 0}, {0x4837, 0x22, 0, 0}, {0x3824, 0x02, 0, 0},
+	{0x5001, 0xa3, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x11, 0, 0},
+	{0x3036, 0x46, 0, 0}, {0x3037, 0x13, 0, 0},
+};
+
+static struct reg_value ov7670_setting_15fps_QVGA_320_240[] = {
+	{0x3c07, 0x08, 0, 0}, {0x3820, 0x41, 0, 0}, {0x3821, 0x07, 0, 0},
+	{0x3814, 0x31, 0, 0}, {0x3815, 0x31, 0, 0}, {0x3800, 0x00, 0, 0},
+	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x04, 0, 0},
+	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
+	{0x3807, 0x9b, 0, 0}, {0x3808, 0x01, 0, 0}, {0x3809, 0x40, 0, 0},
+	{0x380a, 0x00, 0, 0}, {0x380b, 0xf0, 0, 0}, {0x380c, 0x07, 0, 0},
+	{0x380d, 0x68, 0, 0}, {0x380e, 0x03, 0, 0}, {0x380f, 0xd8, 0, 0},
+	{0x3813, 0x06, 0, 0}, {0x3618, 0x00, 0, 0}, {0x3612, 0x29, 0, 0},
+	{0x3709, 0x52, 0, 0}, {0x370c, 0x03, 0, 0}, {0x3a02, 0x0b, 0, 0},
+	{0x3a03, 0x88, 0, 0}, {0x3a14, 0x0b, 0, 0}, {0x3a15, 0x88, 0, 0},
+	{0x4004, 0x02, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
+	{0x4713, 0x03, 0, 0}, {0x4407, 0x04, 0, 0}, {0x460b, 0x35, 0, 0},
+	{0x460c, 0x22, 0, 0}, {0x4837, 0x22, 0, 0}, {0x3824, 0x02, 0, 0},
+	{0x5001, 0xa3, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x21, 0, 0},
+	{0x3036, 0x46, 0, 0}, {0x3037, 0x13, 0, 0},
+};
+
+static struct ov7670_modeinfo ov7670_modeinfo_data[2][ov7670_modeMAX + 1] = {
+	{
+		{ov7670_modeVGA_640_480,      640,  480,
+		ov7670_setting_15fps_VGA_640_480,
+		ARRAY_SIZE(ov7670_setting_15fps_VGA_640_480)},
+		{ov7670_modeQVGA_320_240,     320,  240,
+		ov7670_setting_15fps_QVGA_320_240,
+		ARRAY_SIZE(ov7670_setting_15fps_QVGA_320_240)},
+	},
+	{
+		{ov7670_modeVGA_640_480,      640,  480,
+		ov7670_setting_30fps_VGA_640_480,
+		ARRAY_SIZE(ov7670_setting_30fps_VGA_640_480)},
+		{ov7670_modeQVGA_320_240,     320,  240,
+		ov7670_setting_30fps_QVGA_320_240,
+		ARRAY_SIZE(ov7670_setting_30fps_QVGA_320_240)},
+	},
+};
+
+static struct regulator *io_regulator;
+static struct regulator *core_regulator;
+static struct regulator *analog_regulator;
+
+static int ov7670_probe(struct i2c_client *adapter,
+				const struct i2c_device_id *device_id);
+static int ov7670_remove(struct i2c_client *client);
+
+static s32 ov7670_read_reg(u8 reg, u8 *val);
+static s32 ov7670_write_reg(u8 reg, u8 val);
+
+static const struct i2c_device_id ov7670_id[] = {
+	{ "ov7670", MODEL_OV7670 },
+	{ "ov7675", MODEL_OV7675 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(i2c, ov7670_id);
+
+static struct i2c_driver ov7670_i2c_driver = {
+	.driver = {
+		  .owner = THIS_MODULE,
+		  .name  = "ov7670",
+		  },
+	.probe  = ov7670_probe,
+	.remove = ov7670_remove,
+	.id_table = ov7670_id,
+};
+
+static const struct ov7670_datafmt ov7670_colour_fmts[] = {
+	{V4L2_MBUS_FMT_YUYV8_2X8, V4L2_COLORSPACE_JPEG},
+};
+
+static struct ov7670 *to_ov7670(const struct i2c_client *client)
+{
+	return container_of(i2c_get_clientdata(client), struct ov7670, subdev);
+}
+
+/* Find a data format by a pixel code in an array */
+static const struct ov7670_datafmt
+			*ov7670_find_datafmt(enum v4l2_mbus_pixelcode code)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(ov7670_colour_fmts); i++)
+		if (ov7670_colour_fmts[i].code == code)
+			return ov7670_colour_fmts + i;
+
+	return NULL;
+}
+
+static inline void ov7670_power_down(int enable)
+{
+	gpio_set_value_cansleep(pwn_gpio, enable);
+
+	msleep(20);
+	msleep(81);
+}
+
+static inline void ov7670_reset(void)
+{
+	// Hard reset not implemented, so soft reset
+	ov7670_write_reg(REG_COM7, COM7_RESET);		
+	
+	/* delay at least 5ms */
+	msleep(10);
+}
+
+static s32 ov7670_write_reg(u8 reg, u8 val)
+{
+	u8 au8Buf[2] = {0};
+
+	au8Buf[0] = reg;
+	au8Buf[1] = val;
+
+	if (i2c_master_send(ov7670_data.i2c_client, au8Buf, 2) < 0) {
+		pr_err("%s:write reg error:reg=%x,val=%x\n",
+			__func__, reg, val);
+		return -1;
+	}
+
+	return 0;
+}
+
+static s32 ov7670_read_reg(u8 reg, u8 *val)
+{
+	u8 au8RegBuf[1] = {0};
+	u8 u8RdVal = 0;
+
+	au8RegBuf[0] = reg;
+
+	if (1 != i2c_master_send(ov7670_data.i2c_client, au8RegBuf, 1)) {
+		pr_err("%s:write reg error:reg=%x\n",
+				__func__, reg);
+		return -1;
+	}
+
+	if (1 != i2c_master_recv(ov7670_data.i2c_client, &u8RdVal, 1)) {
+		pr_err("%s:read reg error:reg=%x,val=%x\n",
+				__func__, reg, u8RdVal);
+		return -1;
+	}
+
+	*val = u8RdVal;
+
+	return u8RdVal;
+}
+
+#if 0
+static s32 ov7670_read_only(u8 reg, u8 *val)
+{
+	u8 au8RegBuf[1] = {0};
+	u8 u8RdVal = 0;
+
+	au8RegBuf[0] = reg;
+
+	if (1 != i2c_master_recv(ov7670_data.i2c_client, &u8RdVal, 1)) {
+		pr_err("%s:read reg error:reg=%x,val=%x\n",
+				__func__, reg, u8RdVal);
+		return -1;
+	}
+
+	*val = u8RdVal;
+
+	return u8RdVal;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_ADV_DEBUG
+static int ov7670_get_register(struct v4l2_subdev *sd,
+					struct v4l2_dbg_register *reg)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int ret;
+	u8 val;
+
+	if (reg->reg & ~0xffff)
+		return -EINVAL;
+
+	reg->size = 1;
+
+	ret = ov7670_read_reg(reg->reg, &val);
+	if (!ret)
+		reg->val = (__u64)val;
+
+	return ret;
+}
+
+static int ov7670_set_register(struct v4l2_subdev *sd,
+					const struct v4l2_dbg_register *reg)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	if (reg->reg & ~0xffff || reg->val & ~0xff)
+		return -EINVAL;
+
+	return ov7670_write_reg(reg->reg, reg->val);
+}
+#endif
+
+static void ov7670_soft_reset(void)
+{
+	ov7670_write_reg(REG_COM7, COM7_RESET);		
+	
+	/* delay at least 5ms */
+	msleep(10);
+}
+
+/* set sensor driver capability
+ * 0x302c[7:6] - strength
+	00     - 1x
+	01     - 2x
+	10     - 3x
+	11     - 4x
+ */
+static int ov7670_driver_capability(int strength)
+{
+#if 0	
+	u8 temp = 0;
+
+	if (strength > 4 || strength < 1) {
+		pr_err("The valid driver capability of ov7670 is 1x~4x\n");
+		return -EINVAL;
+	}
+
+	ov7670_read_reg(0x302c, &temp);
+
+	temp &= ~0xc0;	/* clear [7:6] */
+	temp |= ((strength - 1) << 6);	/* set [7:6] */
+
+	ov7670_write_reg(0x302c, temp);
+#endif
+	return 0;
+}
+
+#if 0
+/* calculate sysclk */
+static int ov7670_get_sysclk(void)
+{
+	int sysclk;
+
+	int xvclk = ov7670_data.mclk / 10000;
+	int temp1, temp2;
+	int Multiplier, PreDiv, VCO, SysDiv, Pll_rdiv, Bit_div2x, sclk_rdiv;
+	int sclk_rdiv_map[] = {1, 2, 4, 8};
+	u8 regval = 0;
+
+	temp1 = ov7670_read_reg(0x3034, &regval);
+	temp2 = temp1 & 0x0f;
+	if (temp2 == 8 || temp2 == 10) {
+		Bit_div2x = temp2 / 2;
+	} else {
+		pr_err("ov7670: unsupported bit mode %d\n", temp2);
+		return -1;
+	}
+
+	temp1 = ov7670_read_reg(0x3035, &regval);
+	SysDiv = temp1 >> 4;
+	if (SysDiv == 0)
+		SysDiv = 16;
+
+	temp1 = ov7670_read_reg(0x3036, &regval);
+	Multiplier = temp1;
+	temp1 = ov7670_read_reg(0x3037, &regval);
+	PreDiv = temp1 & 0x0f;
+	Pll_rdiv = ((temp1 >> 4) & 0x01) + 1;
+
+	temp1 = ov7670_read_reg(0x3108, &regval);
+	temp2 = temp1 & 0x03;
+
+	sclk_rdiv = sclk_rdiv_map[temp2];
+	VCO = xvclk * Multiplier / PreDiv;
+	sysclk = VCO / SysDiv / Pll_rdiv * 2 / Bit_div2x / sclk_rdiv;
+
+	return sysclk;
+}
+#endif
+
+#if 0
+/* read HTS from register settings */
+static int ov7670_get_HTS(void)
+{
+	int HTS;
+	
+	u8 temp = 0;
+
+	HTS = ov7670_read_reg(0x380c, &temp);
+	HTS = (HTS<<8) + ov7670_read_reg(0x380d, &temp);
+
+	return HTS;
+}
+#endif
+
+#if 0
+/* read VTS from register settings */
+static int ov7670_get_VTS(void)
+{
+	int VTS;
+	
+	u8 temp = 0;
+
+	VTS = ov7670_read_reg(0x380e, &temp);
+	VTS = (VTS<<8) + ov7670_read_reg(0x380f, &temp);
+
+	return VTS;
+}
+#endif
+
+#if 0
+/* write VTS to registers */
+static int ov7670_set_VTS(int VTS)
+{
+	int temp;
+
+	temp = VTS & 0xff;
+	ov7670_write_reg(0x380f, temp);
+
+	temp = VTS>>8;
+	ov7670_write_reg(0x380e, temp);
+	
+	return 0;
+}
+#endif
+
+#if 0
+/* read shutter, in number of line period */
+static int ov7670_get_shutter(void)
+{
+	int shutter;
+	u8 regval;
+
+	shutter = (ov7670_read_reg(0x03500, &regval) & 0x0f);
+
+	shutter = (shutter<<8) + ov7670_read_reg(0x3501, &regval);
+	shutter = (shutter<<4) + (ov7670_read_reg(0x3502, &regval)>>4);
+
+	return shutter;
+}
+#endif
+
+#if 0
+/* write shutter, in number of line period */
+static int ov7670_set_shutter(int shutter)
+{	
+	int temp;
+
+	shutter = shutter & 0xffff;
+	temp = shutter & 0x0f;
+	temp = temp<<4;
+	ov7670_write_reg(0x3502, temp);
+
+	temp = shutter & 0xfff;
+	temp = temp>>4;
+	ov7670_write_reg(0x3501, temp);
+
+	temp = shutter>>12;
+	ov7670_write_reg(0x3500, temp);
+
+	return 0;
+}
+#endif
+
+#if 0
+/* read gain, 16 = 1x */
+static int ov7670_get_gain16(void)
+{
+	int gain16;
+	u8 regval;
+
+	gain16 = ov7670_read_reg(0x350a, &regval) & 0x03;
+	gain16 = (gain16<<8) + ov7670_read_reg(0x350b, &regval);
+
+	return gain16;
+}
+#endif
+
+#if 0
+/* write gain, 16 = 1x */
+static int ov7670_set_gain16(int gain16)
+{	
+	int temp;
+
+	gain16 = gain16 & 0x3ff;
+	temp = gain16 & 0xff;
+
+	ov7670_write_reg(0x350b, temp);
+	temp = gain16>>8;
+
+	ov7670_write_reg(0x350a, temp);
+
+	return 0;
+}
+#endif
+
+#if 0
+/* get banding filter value */
+static int ov7670_get_light_freq(void)
+{
+	int light_frequency;
+	
+	int temp, temp1, light_frequency;
+	u8 regval;
+
+	temp = ov7670_read_reg(0x3c01, &regval);
+	if (temp & 0x80) {
+		/* manual */
+		temp1 = ov7670_read_reg(0x3c00, &regval);
+		if (temp1 & 0x04) {
+			/* 50Hz */
+			light_frequency = 50;
+		} else {
+			/* 60Hz */
+			light_frequency = 60;
+		}
+	} else {
+		/* auto */
+		temp1 = ov7670_read_reg(0x3c0c, &regval);
+		if (temp1 & 0x01) {
+			/* 50Hz */
+			light_frequency = 50;
+		} else {
+			/* 60Hz */
+			light_frequency = 60;
+		}
+	}
+	
+	return light_frequency;
+}
+#endif
+
+#if 0
+static void ov7670_set_bandingfilter(void)
+{	
+	int prev_VTS;
+	int band_step60, max_band60, band_step50, max_band50;
+
+	/* read preview PCLK */
+	prev_sysclk = ov7670_get_sysclk();
+
+	/* read preview HTS */
+	prev_HTS = ov7670_get_HTS();
+
+	/* read preview VTS */
+	prev_VTS = ov7670_get_VTS();
+
+	/* calculate banding filter */
+	/* 60Hz */
+	band_step60 = prev_sysclk * 100/prev_HTS * 100/120;
+	ov7670_write_reg(0x3a0a, (band_step60 >> 8));
+	ov7670_write_reg(0x3a0b, (band_step60 & 0xff));
+
+	max_band60 = (int)((prev_VTS-4)/band_step60);
+	ov7670_write_reg(0x3a0d, max_band60);
+
+	/* 50Hz */
+	band_step50 = prev_sysclk * 100/prev_HTS;
+	ov7670_write_reg(0x3a08, (band_step50 >> 8));
+	ov7670_write_reg(0x3a09, (band_step50 & 0xff));
+
+	max_band50 = (int)((prev_VTS-4)/band_step50);
+	ov7670_write_reg(0x3a0e, max_band50);
+}
+#endif
+
+#if 0
+/* stable in high */
+static int ov7670_set_AE_target(int target)
+{	
+	int fast_high, fast_low;
+
+	AE_low = target * 23 / 25; /* 0.92 */
+	AE_high = target * 27 / 25; /* 1.08 */
+	fast_high = AE_high << 1;
+
+	if (fast_high > 255)
+		fast_high = 255;
+	fast_low = AE_low >> 1;
+
+	ov7670_write_reg(0x3a0f, AE_high);
+	ov7670_write_reg(0x3a10, AE_low);
+	ov7670_write_reg(0x3a1b, AE_high);
+	ov7670_write_reg(0x3a1e, AE_low);
+	ov7670_write_reg(0x3a11, fast_high);
+	ov7670_write_reg(0x3a1f, fast_low);
+
+	return 0;
+}
+#endif
+
+#if 0
+/* enable = 0 to turn off night mode
+   enable = 1 to turn on night mode */
+static int ov7670_set_night_mode(int enable)
+{	
+	u8 mode;
+
+	ov7670_read_reg(0x3a00, &mode);
+
+	if (enable) {
+		/* night mode on */
+		mode |= 0x04;
+		ov7670_write_reg(0x3a00, mode);
+	} else {
+		/* night mode off */
+		mode &= 0xfb;
+		ov7670_write_reg(0x3a00, mode);
+	}
+	
+	return 0;
+}
+#endif
+
+#if 0
+/* enable = 0 to turn off AEC/AGC
+   enable = 1 to turn on AEC/AGC */
+static void ov7670_turn_on_AE_AG(int enable)
+{
+	u8 ae_ag_ctrl;
+
+	ov7670_read_reg(0x3503, &ae_ag_ctrl);
+	if (enable) {
+		/* turn on auto AE/AG */
+		ae_ag_ctrl = ae_ag_ctrl & ~(0x03);
+	} else {
+		/* turn off AE/AG */
+		ae_ag_ctrl = ae_ag_ctrl | 0x03;
+	}
+	ov7670_write_reg(0x3503, ae_ag_ctrl);
+}
+#endif
+
+/* download ov7670 settings to sensor through i2c */
+static int ov7670_download_firmware(struct reg_value *pModeSetting, s32 ArySize)
+{
+	register u32 Delay_ms = 0;
+	register u16 RegAddr = 0;
+	register u8 Mask = 0;
+	register u8 Val = 0;
+	u8 RegVal = 0;
+	int i, retval = 0;
+	
+	pr_info("ov7670_download_firmware\n");	
+
+	for (i = 0; i < ArySize; ++i, ++pModeSetting) {
+		Delay_ms = pModeSetting->u32Delay_ms;
+		RegAddr = pModeSetting->u16RegAddr;
+		Val = pModeSetting->u8Val;
+		Mask = pModeSetting->u8Mask;
+
+		if (Mask) {
+			retval = ov7670_read_reg(RegAddr, &RegVal);
+			if (retval < 0)
+				goto err;
+
+			RegVal &= ~(u8)Mask;
+			Val &= Mask;
+			Val |= RegVal;
+		}
+
+		retval = ov7670_write_reg(RegAddr, Val);
+		if (retval < 0)
+			goto err;
+
+		if (Delay_ms)
+			msleep(Delay_ms);
+	}
+err:
+	return retval;
+}
+
+static int ov7670_init_mode(void)
+{
+	struct reg_value *pModeSetting = NULL;
+	int ArySize = 0, retval = 0;
+
+	pr_info("ov7670_init_mode\n");
+	
+	ov7670_soft_reset();
+
+	pModeSetting = ov7670_global_init_setting;
+	ArySize = ARRAY_SIZE(ov7670_global_init_setting);
+	retval = ov7670_download_firmware(pModeSetting, ArySize);
+	if (retval < 0)
+		goto err;
+
+	/* change driver capability to 2x according to validation board.
+	 * if the image is not stable, please increase the driver strength.
+	 */
+	ov7670_driver_capability(2);
+	//ov7670_set_bandingfilter();
+	//ov7670_set_AE_target(AE_Target);
+	//ov7670_set_night_mode(night_mode);
+
+	/* skip 9 vysnc: start capture at 10th vsync */
+	msleep(300);
+
+	/* turn off night mode */
+	//night_mode = 0;
+	ov7670_data.pix.width = 640;
+	ov7670_data.pix.height = 480;
+err:
+	return retval;
+}
+
+#if 0
+/* change to or back to subsampling mode set the mode directly
+ * image size below 1280 * 960 is subsampling mode */
+static int ov7670_change_mode_direct(enum ov7670_frame_rate frame_rate,
+			    enum ov7670_mode mode)
+{
+	int retval = 0;
+	
+	struct reg_value *pModeSetting = NULL;
+	s32 ArySize = 0;
+
+	if (mode > ov7670_modeMAX || mode < ov7670_modeMIN) {
+		pr_err("Wrong ov7670 mode detected!\n");
+		return -1;
+	}
+
+	pModeSetting = ov7670_modeinfo_data[frame_rate][mode].init_data_ptr;
+	ArySize =
+		ov7670_modeinfo_data[frame_rate][mode].init_data_size;
+
+	ov7670_data.pix.width = ov7670_modeinfo_data[frame_rate][mode].width;
+	ov7670_data.pix.height = ov7670_modeinfo_data[frame_rate][mode].height;
+
+	if (ov7670_data.pix.width == 0 || ov7670_data.pix.height == 0 ||
+	    pModeSetting == NULL || ArySize == 0)
+		return -EINVAL;
+
+	/* set ov7670 to subsampling mode */
+	retval = ov7670_download_firmware(pModeSetting, ArySize);
+
+	/* turn on AE AG for subsampling mode, in case the firmware didn't */
+	ov7670_turn_on_AE_AG(1);
+
+	/* calculate banding filter */
+	ov7670_set_bandingfilter();
+
+	/* set AE target */
+	ov7670_set_AE_target(AE_Target);
+
+	/* update night mode setting */
+	ov7670_set_night_mode(night_mode);
+
+	/* skip 9 vysnc: start capture at 10th vsync */
+	if (mode == ov7670_modeXGA_1024_768 && frame_rate == ov7670_30_fps) {
+		pr_warning("ov7670: actual frame rate of XGA is 22.5fps\n");
+		/* 1/22.5 * 9*/
+		msleep(400);
+		return retval;
+	}
+
+	if (frame_rate == ov7670_15_fps) {
+		/* 1/15 * 9*/
+		msleep(600);
+	} else if (frame_rate == ov7670_30_fps) {
+		/* 1/30 * 9*/
+		msleep(300);
+	}
+
+	return retval;
+}
+#endif
+
+#if 0
+/* change to scaling mode go through exposure calucation
+ * image size above 1280 * 960 is scaling mode */
+static int ov7670_change_mode_exposure_calc(enum ov7670_frame_rate frame_rate,
+			    enum ov7670_mode mode)
+{
+	int retval = 0;
+		
+	int prev_shutter, prev_gain16, average;
+	int cap_shutter, cap_gain16;
+	int cap_sysclk, cap_HTS, cap_VTS;
+	int light_freq, cap_bandfilt, cap_maxband;
+	long cap_gain16_shutter;
+	u8 temp;
+	struct reg_value *pModeSetting = NULL;
+	s32 ArySize = 0;
+
+
+	/* check if the input mode and frame rate is valid */
+	pModeSetting =
+		ov7670_modeinfo_data[frame_rate][mode].init_data_ptr;
+	ArySize =
+		ov7670_modeinfo_data[frame_rate][mode].init_data_size;
+
+	ov7670_data.pix.width =
+		ov7670_modeinfo_data[frame_rate][mode].width;
+	ov7670_data.pix.height =
+		ov7670_modeinfo_data[frame_rate][mode].height;
+
+	if (ov7670_data.pix.width == 0 || ov7670_data.pix.height == 0 ||
+		pModeSetting == NULL || ArySize == 0)
+		return -EINVAL;
+
+	/* read preview shutter */
+	prev_shutter = ov7670_get_shutter();
+
+	/* read preview gain */
+	prev_gain16 = ov7670_get_gain16();
+
+	/* get average */
+	average = ov7670_read_reg(0x56a1, &temp);
+
+	/* turn off night mode for capture */
+	ov7670_set_night_mode(0);
+
+	/* turn off overlay */
+	ov7670_write_reg(0x3022, 0x06);
+
+	/* Write capture setting */
+	retval = ov7670_download_firmware(pModeSetting, ArySize);
+	if (retval < 0)
+		goto err;
+
+	/* turn off AE AG when capture image. */
+	ov7670_turn_on_AE_AG(0);
+
+	/* read capture VTS */
+	cap_VTS = ov7670_get_VTS();
+	cap_HTS = ov7670_get_HTS();
+	cap_sysclk = ov7670_get_sysclk();
+
+	/* calculate capture banding filter */
+	light_freq = ov7670_get_light_freq();
+	if (light_freq == 60) {
+		/* 60Hz */
+		cap_bandfilt = cap_sysclk * 100 / cap_HTS * 100 / 120;
+	} else {
+		/* 50Hz */
+		cap_bandfilt = cap_sysclk * 100 / cap_HTS;
+	}
+	cap_maxband = (int)((cap_VTS - 4)/cap_bandfilt);
+	/* calculate capture shutter/gain16 */
+	if (average > AE_low && average < AE_high) {
+		/* in stable range */
+		cap_gain16_shutter =
+			prev_gain16 * prev_shutter * cap_sysclk/prev_sysclk *
+			prev_HTS/cap_HTS * AE_Target / average;
+	} else {
+		cap_gain16_shutter =
+			prev_gain16 * prev_shutter * cap_sysclk/prev_sysclk *
+			prev_HTS/cap_HTS;
+	}
+
+	/* gain to shutter */
+	if (cap_gain16_shutter < (cap_bandfilt * 16)) {
+		/* shutter < 1/100 */
+		cap_shutter = cap_gain16_shutter/16;
+		if (cap_shutter < 1)
+			cap_shutter = 1;
+		cap_gain16 = cap_gain16_shutter/cap_shutter;
+		if (cap_gain16 < 16)
+			cap_gain16 = 16;
+	} else {
+		if (cap_gain16_shutter > (cap_bandfilt*cap_maxband*16)) {
+			/* exposure reach max */
+			cap_shutter = cap_bandfilt*cap_maxband;
+			cap_gain16 = cap_gain16_shutter / cap_shutter;
+		} else {
+			/* 1/100 < cap_shutter =< max, cap_shutter = n/100 */
+			cap_shutter =
+				((int)(cap_gain16_shutter/16/cap_bandfilt))
+				* cap_bandfilt;
+			cap_gain16 = cap_gain16_shutter / cap_shutter;
+		}
+	}
+
+	/* write capture gain */
+	ov7670_set_gain16(cap_gain16);
+
+	/* write capture shutter */
+	if (cap_shutter > (cap_VTS - 4)) {
+		cap_VTS = cap_shutter + 4;
+		ov7670_set_VTS(cap_VTS);
+	}
+
+	ov7670_set_shutter(cap_shutter);
+
+	/* skip 2 vysnc: start capture at 3rd vsync
+	 * frame rate of QSXGA and 1080P is 7.5fps: 1/7.5 * 2
+	 */
+	pr_warning("ov7670: the actual frame rate of %s is 7.5fps\n",
+		mode == ov7670_mode1080P_1920_1080 ? "1080P" : "QSXGA");
+	msleep(267);
+	
+err:
+	return retval;
+}
+#endif
+
+
+static int ov7670_change_mode(enum ov7670_frame_rate frame_rate,
+			    enum ov7670_mode mode)
+{
+	int retval = 0;
+#if 0	
+	if (mode > ov7670_modeMAX || mode < ov7670_modeMIN) {
+		pr_err("Wrong ov7670 mode detected!\n");
+		return -1;
+	}
+
+	if (mode == ov7670_mode1080P_1920_1080 ||
+			mode == ov7670_modeQSXGA_2592_1944) {
+		/* change to scaling mode go through exposure calucation
+		 * image size above 1280 * 960 is scaling mode */
+		retval = ov7670_change_mode_exposure_calc(frame_rate, mode);
+	} else {
+		/* change back to subsampling modem download firmware directly
+		 * image size below 1280 * 960 is subsampling mode */
+		retval = ov7670_change_mode_direct(frame_rate, mode);
+	}
+#endif
+	return retval;
+}
+
+
+/*!
+ * ov7670_s_power - V4L2 sensor interface handler for VIDIOC_S_POWER ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @on: indicates power mode (on or off)
+ *
+ * Turns the power on or off, depending on the value of on and returns the
+ * appropriate error code.
+ */
+static int ov7670_s_power(struct v4l2_subdev *sd, int on)
+{
+#if 0	
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ov7670 *sensor = to_ov7670(client);
+
+	if (on)
+		clk_enable(ov7670_data.sensor_clk);
+	else
+		clk_disable(ov7670_data.sensor_clk);
+
+	sensor->on = on;
+#endif
+	return 0;
+}
+
+/*!
+ * ov7670_g_parm - V4L2 sensor interface handler for VIDIOC_G_PARM ioctl
+ * @s: pointer to standard V4L2 sub device structure
+ * @a: pointer to standard V4L2 VIDIOC_G_PARM ioctl structure
+ *
+ * Returns the sensor's video CAPTURE parameters.
+ */
+static int ov7670_g_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ov7670 *sensor = to_ov7670(client);
+	struct v4l2_captureparm *cparm = &a->parm.capture;
+	int ret = 0;
+
+	switch (a->type) {
+	/* This is the only case currently handled. */
+	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
+		memset(a, 0, sizeof(*a));
+		a->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+		cparm->capability = sensor->streamcap.capability;
+		cparm->timeperframe = sensor->streamcap.timeperframe;
+		cparm->capturemode = sensor->streamcap.capturemode;
+		ret = 0;
+		break;
+
+	/* These are all the possible cases. */
+	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
+	case V4L2_BUF_TYPE_VIDEO_OVERLAY:
+	case V4L2_BUF_TYPE_VBI_CAPTURE:
+	case V4L2_BUF_TYPE_VBI_OUTPUT:
+	case V4L2_BUF_TYPE_SLICED_VBI_CAPTURE:
+	case V4L2_BUF_TYPE_SLICED_VBI_OUTPUT:
+		ret = -EINVAL;
+		break;
+
+	default:
+		pr_debug("   type is unknown - %d\n", a->type);
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+/*!
+ * ov5460_s_parm - V4L2 sensor interface handler for VIDIOC_S_PARM ioctl
+ * @s: pointer to standard V4L2 sub device structure
+ * @a: pointer to standard V4L2 VIDIOC_S_PARM ioctl structure
+ *
+ * Configures the sensor to use the input parameters, if possible.  If
+ * not possible, reverts to the old parameters and returns the
+ * appropriate error code.
+ */
+static int ov7670_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ov7670 *sensor = to_ov7670(client);
+	struct v4l2_fract *timeperframe = &a->parm.capture.timeperframe;
+	u32 tgt_fps;	/* target frames per secound */
+	enum ov7670_frame_rate frame_rate;
+	int ret = 0;
+
+	switch (a->type) {
+	/* This is the only case currently handled. */
+	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
+		/* Check that the new frame rate is allowed. */
+		if ((timeperframe->numerator == 0) ||
+		    (timeperframe->denominator == 0)) {
+			timeperframe->denominator = DEFAULT_FPS;
+			timeperframe->numerator = 1;
+		}
+
+		tgt_fps = timeperframe->denominator /
+			  timeperframe->numerator;
+
+		if (tgt_fps > MAX_FPS) {
+			timeperframe->denominator = MAX_FPS;
+			timeperframe->numerator = 1;
+		} else if (tgt_fps < MIN_FPS) {
+			timeperframe->denominator = MIN_FPS;
+			timeperframe->numerator = 1;
+		}
+
+		/* Actual frame rate we use */
+		tgt_fps = timeperframe->denominator /
+			  timeperframe->numerator;
+
+		if (tgt_fps == 15)
+			frame_rate = ov7670_15_fps;
+		else if (tgt_fps == 30)
+			frame_rate = ov7670_30_fps;
+		else {
+			pr_err(" The camera frame rate is not supported!\n");
+			goto error;
+		}
+
+		ret = ov7670_change_mode(frame_rate,
+				a->parm.capture.capturemode);
+		if (ret < 0)
+			goto error;
+
+		sensor->streamcap.timeperframe = *timeperframe;
+		sensor->streamcap.capturemode = a->parm.capture.capturemode;
+
+		break;
+
+	/* These are all the possible cases. */
+	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
+	case V4L2_BUF_TYPE_VIDEO_OVERLAY:
+	case V4L2_BUF_TYPE_VBI_CAPTURE:
+	case V4L2_BUF_TYPE_VBI_OUTPUT:
+	case V4L2_BUF_TYPE_SLICED_VBI_CAPTURE:
+	case V4L2_BUF_TYPE_SLICED_VBI_OUTPUT:
+		pr_debug("   type is not " \
+			"V4L2_BUF_TYPE_VIDEO_CAPTURE but %d\n",
+			a->type);
+		ret = -EINVAL;
+		break;
+
+	default:
+		pr_debug("   type is unknown - %d\n", a->type);
+		ret = -EINVAL;
+		break;
+	}
+
+error:
+	return ret;
+}
+
+static int ov7670_try_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_mbus_framefmt *mf)
+{
+	const struct ov7670_datafmt *fmt = ov7670_find_datafmt(mf->code);
+
+	if (!fmt) {
+		mf->code	= ov7670_colour_fmts[0].code;
+		mf->colorspace	= ov7670_colour_fmts[0].colorspace;
+	}
+
+	mf->field	= V4L2_FIELD_NONE;
+
+	return 0;
+}
+
+static int ov7670_s_fmt(struct v4l2_subdev *sd,
+			struct v4l2_mbus_framefmt *mf)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ov7670 *sensor = to_ov7670(client);
+
+	/* MIPI CSI could have changed the format, double-check */
+	if (!ov7670_find_datafmt(mf->code))
+		return -EINVAL;
+
+	ov7670_try_fmt(sd, mf);
+	sensor->fmt = ov7670_find_datafmt(mf->code);
+
+	return 0;
+}
+
+static int ov7670_g_fmt(struct v4l2_subdev *sd,
+			struct v4l2_mbus_framefmt *mf)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ov7670 *sensor = to_ov7670(client);
+
+	const struct ov7670_datafmt *fmt = sensor->fmt;
+
+	mf->code	= fmt->code;
+	mf->colorspace	= fmt->colorspace;
+	mf->field	= V4L2_FIELD_NONE;
+
+	return 0;
+}
+
+static int ov7670_enum_fmt(struct v4l2_subdev *sd, unsigned int index,
+			   enum v4l2_mbus_pixelcode *code)
+{
+	if (index >= ARRAY_SIZE(ov7670_colour_fmts))
+		return -EINVAL;
+
+	*code = ov7670_colour_fmts[index].code;
+	return 0;
+}
+
+/*!
+ * ov7670_enum_framesizes - V4L2 sensor interface handler for
+ *			   VIDIOC_ENUM_FRAMESIZES ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @fsize: standard V4L2 VIDIOC_ENUM_FRAMESIZES ioctl structure
+ *
+ * Return 0 if successful, otherwise -EINVAL.
+ */
+static int ov7670_enum_framesizes(struct v4l2_subdev *sd,
+		struct v4l2_frmsizeenum *fsize)
+{
+	if (fsize->index > ov7670_modeMAX)
+		return -EINVAL;
+
+	fsize->type = V4L2_FRMSIZE_TYPE_DISCRETE;
+	fsize->discrete.width =
+			max(ov7670_modeinfo_data[0][fsize->index].width,
+			    ov7670_modeinfo_data[1][fsize->index].width);
+	fsize->discrete.height =
+			max(ov7670_modeinfo_data[0][fsize->index].height,
+			    ov7670_modeinfo_data[1][fsize->index].height);
+	return 0;
+}
+
+/*!
+ * ov7670_enum_frameintervals - V4L2 sensor interface handler for
+ *			       VIDIOC_ENUM_FRAMEINTERVALS ioctl
+ * @s: pointer to standard V4L2 device structure
+ * @fival: standard V4L2 VIDIOC_ENUM_FRAMEINTERVALS ioctl structure
+ *
+ * Return 0 if successful, otherwise -EINVAL.
+ */
+static int ov7670_enum_frameintervals(struct v4l2_subdev *sd,
+		struct v4l2_frmivalenum *fival)
+{
+	int i, j, count;
+
+	if (fival->index < 0 || fival->index > ov7670_modeMAX)
+		return -EINVAL;
+
+	if (fival->width == 0 || fival->height == 0 ||
+	    fival->pixel_format == 0) {
+		pr_warning("Please assign pixelformat, width and height.\n");
+		return -EINVAL;
+	}
+
+	fival->type = V4L2_FRMIVAL_TYPE_DISCRETE;
+	fival->discrete.numerator = 1;
+
+	count = 0;
+	for (i = 0; i < ARRAY_SIZE(ov7670_modeinfo_data); i++) {
+		for (j = 0; j < (ov7670_modeMAX + 1); j++) {
+			if (fival->pixel_format == ov7670_data.pix.pixelformat
+			 && fival->width == ov7670_modeinfo_data[i][j].width
+			 && fival->height == ov7670_modeinfo_data[i][j].height
+			 && ov7670_modeinfo_data[i][j].init_data_ptr != NULL) {
+				count++;
+			}
+			if (fival->index == (count - 1)) {
+				fival->discrete.denominator =
+						ov7670_framerates[i];
+				return 0;
+			}
+		}
+	}
+
+	return -EINVAL;
+}
+
+static int ov7670_set_clk_rate(void)
+{
+	u32 tgt_xclk;	/* target xclk */
+	int ret;
+
+	/* mclk */
+	tgt_xclk = ov7670_data.mclk;
+	tgt_xclk = min(tgt_xclk, (u32)OV7670_XCLK_MAX);
+	tgt_xclk = max(tgt_xclk, (u32)OV7670_XCLK_MIN);
+	ov7670_data.mclk = tgt_xclk;
+
+	pr_debug("   Setting mclk to %d MHz\n", tgt_xclk / 1000000);
+	ret = clk_set_rate(ov7670_data.sensor_clk, ov7670_data.mclk);
+	if (ret < 0)
+		pr_debug("set rate filed, rate=%d\n", ov7670_data.mclk);
+	return ret;
+}
+
+/*!
+ * dev_init - V4L2 sensor init
+ * @s: pointer to standard V4L2 device structure
+ *
+ */
+static int init_device(void)
+{
+	u32 tgt_xclk;	/* target xclk */
+	u32 tgt_fps;	/* target frames per secound */
+	enum ov7670_frame_rate frame_rate;
+	int ret;
+
+	ov7670_data.on = true;
+
+	/* mclk */
+	tgt_xclk = ov7670_data.mclk;
+
+	/* Default camera frame rate is set in probe */
+	tgt_fps = ov7670_data.streamcap.timeperframe.denominator /
+		  ov7670_data.streamcap.timeperframe.numerator;
+
+	if (tgt_fps == 15)
+		frame_rate = ov7670_15_fps;
+	else if (tgt_fps == 30)
+		frame_rate = ov7670_30_fps;
+	else
+		return -EINVAL; /* Only support 15fps or 30fps now. */
+
+	ret = ov7670_init_mode();
+
+	return ret;
+}
+
+static struct v4l2_subdev_video_ops ov7670_subdev_video_ops = {
+	.g_parm = ov7670_g_parm,
+	.s_parm = ov7670_s_parm,
+
+	.s_mbus_fmt	= ov7670_s_fmt,
+	.g_mbus_fmt	= ov7670_g_fmt,
+	.try_mbus_fmt	= ov7670_try_fmt,
+	.enum_mbus_fmt	= ov7670_enum_fmt,
+	.enum_framesizes     = ov7670_enum_framesizes,
+	.enum_frameintervals = ov7670_enum_frameintervals,
+};
+
+static struct v4l2_subdev_core_ops ov7670_subdev_core_ops = {
+	.s_power	= ov7670_s_power,
+#ifdef CONFIG_VIDEO_ADV_DEBUG
+	.g_register	= ov7670_get_register,
+	.s_register	= ov7670_set_register,
+#endif
+};
+
+static struct v4l2_subdev_ops ov7670_subdev_ops = {
+	.core	= &ov7670_subdev_core_ops,
+	.video	= &ov7670_subdev_video_ops,
+};
+
+/*!
+ * ov7670 I2C probe function
+ *
+ * @param adapter            struct i2c_adapter *
+ * @return  Error code indicating success or failure
+ */
+static int ov7670_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct pinctrl *pinctrl;
+	struct device *dev = &client->dev;
+	int retval;
+	u8 chip_id_high, chip_id_low;
+	
+	pr_info("ov7670_probe\n");	
+	
+	pr_info("i2c client flags %x\n", client->flags);	
+	pr_info("i2c client addr %x\n", client->addr);
+	pr_info("i2c client name %s\n", client->name);
+	
+/*	
+  unsigned short flags;
+  unsigned short addr;
+  char name[I2C_NAME_SIZE];
+  struct i2c_adapter * adapter;
+  struct device dev;
+  int irq;
+  struct list_head detected;	
+*/
+	/* ov7670 pinctrl */
+	pinctrl = devm_pinctrl_get_select_default(dev);
+	if (IS_ERR(pinctrl)) {
+		dev_err(dev, "setup pinctrl failed\n");
+		return PTR_ERR(pinctrl);
+	}
+
+	/* request power down pin */
+	pwn_gpio = of_get_named_gpio(dev->of_node, "pwn-gpios", 0);
+	if (!gpio_is_valid(pwn_gpio)) {
+		dev_err(dev, "no sensor pwdn pin available\n");
+		return -ENODEV;
+	}
+	retval = devm_gpio_request_one(dev, pwn_gpio, GPIOF_OUT_INIT_HIGH,
+					"ov7670_pwdn");
+	if (retval < 0)
+		return retval;
+
+	/* Set initial values for the sensor struct. */
+	memset(&ov7670_data, 0, sizeof(ov7670_data));
+	ov7670_data.sensor_clk = devm_clk_get(dev, "csi_mclk");
+	if (IS_ERR(ov7670_data.sensor_clk)) {
+		dev_err(dev, "get mclk failed\n");
+		return PTR_ERR(ov7670_data.sensor_clk);
+	}
+
+	retval = of_property_read_u32(dev->of_node, "mclk",
+					&ov7670_data.mclk);
+	if (retval) {
+		dev_err(dev, "mclk frequency is invalid\n");
+		return retval;
+	}
+
+	retval = of_property_read_u32(dev->of_node, "mclk_source",
+					(u32 *) &(ov7670_data.mclk_source));
+	if (retval) {
+		dev_err(dev, "mclk_source invalid\n");
+		return retval;
+	}
+
+	retval = of_property_read_u32(dev->of_node, "csi_id",
+					&(ov7670_data.csi));
+	if (retval) {
+		dev_err(dev, "csi_id invalid\n");
+		return retval;
+	}
+
+	/* Set mclk rate before clk on */
+	ov7670_set_clk_rate();
+
+	clk_prepare_enable(ov7670_data.sensor_clk);
+
+	ov7670_data.io_init = ov7670_reset;
+	ov7670_data.i2c_client = client;
+	ov7670_data.pix.pixelformat = V4L2_PIX_FMT_YUYV;
+	ov7670_data.pix.width = 640;
+	ov7670_data.pix.height = 480;
+	ov7670_data.streamcap.capability = V4L2_MODE_HIGHQUALITY |
+					   V4L2_CAP_TIMEPERFRAME;
+	ov7670_data.streamcap.capturemode = 0;
+	ov7670_data.streamcap.timeperframe.denominator = DEFAULT_FPS;
+	ov7670_data.streamcap.timeperframe.numerator = 1;
+
+	ov7670_reset();
+	
+	ov7670_power_down(0);	
+	
+	ov7670_reset();
+
+#if 0
+
+	ov7670_power_down(1);	
+	ov7670_power_down(0);	
+	ov7670_power_down(1);
+	ov7670_power_down(0);	
+	ov7670_power_down(1);
+#endif
+
+	// retval = ov7670_read_only(REG_PID, &chip_id_high);
+		
+	retval = ov7670_read_reg(REG_PID, &chip_id_high);
+	if (retval < 0 || chip_id_high != 0x76) {
+		clk_disable_unprepare(ov7670_data.sensor_clk);
+		pr_warning("camera ov7670 is not found\n");
+		return -ENODEV;
+	}
+	retval = ov7670_read_reg(REG_VER, &chip_id_low);
+	if (retval < 0 || chip_id_low != 0x73) {
+		clk_disable_unprepare(ov7670_data.sensor_clk);
+		pr_warning("camera ov7670 is not found\n");
+		return -ENODEV;
+	}
+
+	retval = init_device();
+	if (retval < 0) {
+		clk_disable_unprepare(ov7670_data.sensor_clk);
+		pr_warning("camera ov7670 init failed\n");
+		ov7670_power_down(1);
+		return retval;
+	}
+
+	clk_disable(ov7670_data.sensor_clk);
+
+	v4l2_i2c_subdev_init(&ov7670_data.subdev, client, &ov7670_subdev_ops);
+
+	retval = v4l2_async_register_subdev(&ov7670_data.subdev);
+	if (retval < 0)
+		dev_err(&client->dev,
+					"%s--Async register failed, ret=%d\n", __func__, retval);
+
+	pr_info("camera ov7670, is found\n");
+	return retval;
+}
+
+/*!
+ * ov7670 I2C detach function
+ *
+ * @param client            struct i2c_client *
+ * @return  Error code indicating success or failure
+ */
+static int ov7670_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+
+	v4l2_async_unregister_subdev(sd);
+
+	clk_unprepare(ov7670_data.sensor_clk);
+
+	ov7670_power_down(1);
+
+	if (analog_regulator)
+		regulator_disable(analog_regulator);
+
+	if (core_regulator)
+		regulator_disable(core_regulator);
+
+	if (io_regulator)
+		regulator_disable(io_regulator);
+
+	return 0;
+}
+
+module_i2c_driver(ov7670_i2c_driver);
+
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_DESCRIPTION("OV7670 Camera Driver");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0");
+MODULE_ALIAS("CSI");
